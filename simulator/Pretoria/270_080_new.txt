>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
421	 13	 13	 1	 0.005105	 -1	 0.000000	 6.556552
422	 13	 13	 1	 0.002073	 -1	 0.000000	 6.743828
423	 13	 13	 1	 0.000709	 -1	 0.000000	 6.227087
424	 13	 13	 1	 0.000403	 -1	 0.000000	 5.324835
425	 13	 13	 1	 0.000686	 -1	 0.000000	 6.272354
426	 13	 13	 1	 0.002755	 -1	 0.000000	 4.471150
427	 13	 13	 1	 0.000366	 -1	 0.000000	 7.268324
428	 13	 13	 1	 0.000263	 -1	 0.000000	 5.216239
429	 13	 13	 1	 0.000385	 -1	 0.000000	 7.525226
430	 13	 13	 1	 0.000441	 -1	 0.000000	 16.651806
431	 13	 13	 1	 0.001378	 -1	 0.000000	 14.394804
432	 13	 13	 1	 0.000637	 -1	 0.000000	 5.930172
433	 13	 13	 1	 0.000549	 -1	 0.000000	 4.862299
434	 13	 13	 1	 0.000192	 -1	 0.000000	 8.893765
435	 13	 13	 1	 0.000369	 -1	 0.000000	 7.007712
436	 13	 13	 1	 0.003569	 -1	 0.000000	 3.834824
437	 13	 13	 1	 0.046494	 -1	 0.000000	 5.408448
438	 13	 13	 1	 0.000305	 -1	 0.000000	 5.153637
439	 13	 13	 1	 0.003713	 -1	 0.000000	 7.141305
440	 13	 13	 1	 0.000219	 -1	 0.000000	 4.869794
441	 13	 13	 1	 0.000421	 -1	 0.000000	 2.497135
442	 13	 13	 1	 0.000452	 -1	 0.000000	 8.854066
443	 13	 13	 1	 0.000596	 -1	 0.000000	 4.308718
444	 13	 13	 1	 0.003889	 -1	 0.000000	 9.928235
445	 13	 13	 1	 0.000508	 -1	 0.000000	 7.174129
446	 13	 13	 1	 0.078757	 -1	 0.000000	 7.816355
447	 13	 13	 1	 0.000159	 -1	 0.000000	 8.080298
448	 13	 13	 1	 0.041427	 -1	 0.000000	 3.919135
449	 13	 13	 1	 0.002633	 -1	 0.000000	 8.446320
450	 13	 13	 1	 0.000665	 -1	 0.000000	 4.329362
451	 13	 13	 1	 0.003899	 -1	 0.000000	 5.926248
452	 13	 13	 1	 0.000431	 -1	 0.000000	 7.229299
453	 13	 13	 1	 0.001006	 -1	 0.000000	 9.246223
454	 13	 13	 1	 0.009613	 -1	 0.000000	 5.204745
455	 13	 13	 1	 0.003483	 -1	 0.000000	 12.124440
456	 13	 13	 1	 0.000785	 -1	 0.000000	 4.513100
457	 13	 13	 1	 0.017360	 -1	 0.000000	 4.789905
458	 13	 13	 1	 0.000379	 -1	 0.000000	 5.994823
459	 13	 13	 1	 0.000533	 -1	 0.000000	 3.704538
460	 13	 13	 1	 0.001219	 -1	 0.000000	 7.149044
461	 13	 13	 1	 0.002365	 -1	 0.000000	 4.297531
462	 13	 13	 1	 0.005709	 -1	 0.000000	 5.097792
463	 13	 13	 1	 0.000382	 -1	 0.000000	 4.024431
464	 13	 13	 1	 0.000574	 -1	 0.000000	 4.399261
465	 13	 13	 1	 0.002416	 -1	 0.000000	 9.222407
466	 13	 13	 1	 0.000338	 -1	 0.000000	 7.798007
467	 13	 13	 1	 0.000248	 -1	 0.000000	 3.502433
468	 13	 13	 1	 0.000662	 -1	 0.000000	 5.018613
469	 13	 13	 1	 0.000372	 -1	 0.000000	 8.103405
470	 13	 13	 1	 0.000310	 -1	 0.000000	 5.348288
471	 13	 13	 1	 0.000396	 -1	 0.000000	 8.009860
472	 13	 13	 1	 0.000670	 -1	 0.000000	 7.791617
473	 13	 13	 1	 0.000792	 -1	 0.000000	 5.930567
474	 13	 13	 1	 0.002842	 -1	 0.000000	 7.276588
475	 13	 13	 1	 0.002046	 -1	 0.000000	 5.380232
476	 13	 13	 1	 0.000387	 -1	 0.000000	 4.346864
477	 13	 13	 1	 0.000913	 -1	 0.000000	 4.587708
478	 13	 13	 1	 0.000678	 -1	 0.000000	 4.191880
479	 13	 13	 1	 0.020705	 -1	 0.000000	 5.029966
480	 13	 13	 1	 0.000734	 -1	 0.000000	 7.461215
481	 13	 13	 1	 0.003081	 -1	 0.000000	 4.775224
482	 13	 13	 1	 0.001747	 -1	 0.000000	 5.334639
483	 13	 13	 1	 0.000429	 -1	 0.000000	 7.659404
484	 13	 13	 1	 0.002338	 -1	 0.000000	 10.127110
485	 13	 13	 1	 0.000217	 -1	 0.000000	 8.566924
486	 13	 13	 1	 0.001025	 -1	 0.000000	 10.636553
487	 13	 13	 1	 0.000208	 -1	 0.000000	 5.853410
488	 13	 13	 1	 0.001237	 -1	 0.000000	 5.847013
489	 13	 13	 1	 0.001042	 -1	 0.000000	 6.784925
490	 13	 13	 1	 0.004281	 -1	 0.000000	 4.986326
491	 13	 13	 1	 0.000512	 -1	 0.000000	 5.928761
492	 13	 13	 1	 0.000369	 -1	 0.000000	 6.476324
493	 13	 13	 1	 0.000584	 -1	 0.000000	 6.899770
494	 13	 13	 1	 0.001152	 -1	 0.000000	 5.139119
495	 13	 13	 1	 0.001482	 -1	 0.000000	 3.368400
496	 13	 13	 1	 0.000212	 -1	 0.000000	 5.354027
497	 13	 13	 1	 0.000599	 -1	 0.000000	 4.137802
498	 13	 13	 1	 0.003675	 -1	 0.000000	 6.661585
499	 13	 13	 1	 0.000363	 -1	 0.000000	 4.255877
0	 13	 13	 1	 0.005576	 -1	 0.000000	 6.059000
1	 13	 13	 1	 0.000687	 -1	 0.000000	 6.478284
2	 13	 13	 1	 0.000506	 -1	 0.000000	 6.739416
3	 13	 13	 1	 0.000511	 -1	 0.000000	 4.641863
4	 13	 13	 1	 0.001976	 -1	 0.000000	 4.785956
5	 13	 13	 1	 0.000664	 -1	 0.000000	 5.667924
6	 13	 13	 1	 0.000249	 -1	 0.000000	 4.001828
7	 13	 13	 1	 0.002062	 -1	 0.000000	 4.703458
8	 13	 13	 1	 0.002290	 -1	 0.000000	 5.430953
9	 13	 13	 1	 0.000543	 -1	 0.000000	 5.598502
10	 13	 13	 1	 0.000249	 -1	 0.000000	 7.317509
11	 13	 13	 1	 0.003313	 -1	 0.000000	 14.322493
12	 13	 13	 1	 0.000286	 -1	 0.000000	 7.829728
13	 13	 13	 1	 0.002932	 -1	 0.000000	 3.352753
14	 13	 13	 1	 0.001950	 -1	 0.000000	 5.338553
15	 13	 13	 1	 0.002756	 -1	 0.000000	 9.658485
16	 13	 13	 1	 0.000330	 -1	 0.000000	 11.224521
17	 13	 13	 1	 0.000624	 -1	 0.000000	 3.792568
18	 13	 13	 1	 0.001227	 -1	 0.000000	 7.319682
19	 13	 13	 1	 0.000228	 -1	 0.000000	 9.869685
20	 13	 13	 1	 0.010320	 -1	 0.000000	 2.642559
21	 13	 13	 1	 0.000796	 -1	 0.000000	 3.968602
22	 13	 13	 1	 0.000705	 -1	 0.000000	 7.408416
23	 13	 13	 1	 0.001488	 -1	 0.000000	 5.698596
24	 13	 13	 1	 0.000278	 -1	 0.000000	 5.198042
25	 13	 13	 1	 0.000306	 -1	 0.000000	 7.674373
26	 13	 13	 1	 0.000529	 -1	 0.000000	 4.539789
27	 13	 13	 1	 0.000485	 -1	 0.000000	 8.296662
28	 13	 13	 1	 0.000593	 -1	 0.000000	 5.316985
29	 13	 13	 1	 17.808115	 -1	 0.000000	 8.776739
340	 13	 13	 1	 1.090374	 -1	 0.000000	 3.551353
341	 13	 13	 1	 0.000259	 -1	 0.000000	 5.556659
342	 13	 13	 1	 0.000774	 -1	 0.000000	 3.981098
343	 13	 13	 1	 0.000865	 -1	 0.000000	 4.647733
344	 13	 13	 1	 0.000865	 -1	 0.000000	 5.306644
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
433	 13	 13	 1	 0.000857	 -1	 0.000000	 4.709786
434	 13	 13	 1	 0.004303	 -1	 0.000000	 8.906673
435	 13	 13	 1	 0.000447	 -1	 0.000000	 7.932972
436	 13	 13	 1	 0.000384	 -1	 0.000000	 5.365557
437	 13	 13	 1	 0.001543	 -1	 0.000000	 13.775440
438	 13	 13	 1	 0.000246	 -1	 0.000000	 5.481424
439	 13	 13	 1	 0.002373	 -1	 0.000000	 6.740463
440	 13	 13	 1	 0.001066	 -1	 0.000000	 7.170289
441	 13	 13	 1	 0.000805	 -1	 0.000000	 5.015901
442	 13	 13	 1	 0.000367	 -1	 0.000000	 6.022863
443	 13	 13	 1	 0.004372	 -1	 0.000000	 10.637890
444	 13	 13	 1	 0.004389	 -1	 0.000000	 7.843683
445	 13	 13	 1	 0.003487	 -1	 0.000000	 6.114861
446	 13	 13	 1	 0.000617	 -1	 0.000000	 5.733845
447	 13	 13	 1	 0.004721	 -1	 0.000000	 5.903108
448	 13	 13	 1	 0.000512	 -1	 0.000000	 6.308515
0	 15	 15	 1	 0.148333	 -1	 0.000000	 3.519114
1	 15	 15	 1	 0.091855	 -1	 0.000000	 9.493910
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 15	 15	 1	 0.006961	 -1	 0.000000	 4.898490
1	 15	 15	 1	 0.047467	 -1	 0.000000	 7.209283
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 5	 5	 1	 2.830475	 -1	 0.000000	 5.538849
1	 5	 5	 1	 1.357815	 -1	 0.000000	 5.774492
2	 5	 5	 1	 5.030482	 -1	 0.000000	 3.689988
3	 5	 5	 1	 4.152075	 -1	 0.000000	 5.732829
4	 5	 5	 1	 3.830684	 -1	 0.000000	 9.227338
5	 5	 5	 1	 3.296083	 -1	 0.000000	 5.477088
6	 5	 5	 1	 4.355625	 -1	 0.000000	 7.565861
7	 5	 5	 1	 1.960506	 -1	 0.000000	 3.574475
8	 5	 5	 1	 1.528102	 -1	 0.000000	 3.943503
9	 5	 5	 1	 3.429709	 -1	 0.000000	 5.290991
10	 5	 5	 1	 2.259099	 -1	 0.000000	 10.068198
11	 5	 5	 1	 12.816630	 -1	 0.000000	 4.899236
12	 5	 5	 1	 16.417319	 -1	 0.000000	 8.621138
13	 5	 5	 1	 8.403919	 -1	 0.000000	 4.605264
14	 5	 5	 1	 7.405007	 -1	 0.000000	 5.823771
15	 5	 5	 1	 5.324490	 -1	 0.000000	 10.607318
16	 5	 5	 1	 8.402363	 -1	 0.000000	 5.622372
17	 5	 5	 1	 9.963945	 -1	 0.000000	 6.766100
18	 5	 5	 1	 2.780153	 -1	 0.000000	 3.614308
19	 5	 5	 1	 11.670068	 -1	 0.000000	 15.952134
20	 5	 5	 1	 1.998199	 -1	 0.000000	 5.603915
21	 5	 5	 1	 11.464852	 -1	 0.000000	 7.683890
22	 5	 5	 1	 2.356468	 -1	 0.000000	 11.024958
23	 5	 5	 1	 4.327654	 -1	 0.000000	 3.342313
24	 5	 5	 1	 13.049700	 -1	 0.000000	 4.949009
25	 5	 5	 1	 3.585239	 -1	 0.000000	 7.018635
26	 5	 5	 1	 4.026844	 -1	 0.000000	 4.063211
27	 5	 5	 1	 6.139766	 -1	 0.000000	 6.281645
28	 5	 5	 1	 4.360031	 -1	 0.000000	 3.323529
29	 5	 5	 1	 1.321847	 -1	 0.000000	 7.531042
30	 5	 5	 1	 5.862942	 -1	 0.000000	 5.194400
31	 5	 5	 1	 3.899408	 -1	 0.000000	 6.316874
32	 5	 5	 1	 6.480340	 -1	 0.000000	 4.141629
33	 5	 5	 1	 2.341821	 -1	 0.000000	 4.357286
34	 5	 5	 1	 2.355089	 -1	 0.000000	 3.406449
35	 5	 5	 1	 3.719879	 -1	 0.000000	 5.844559
36	 5	 5	 1	 1.991543	 -1	 0.000000	 5.707230
37	 5	 5	 1	 1.595074	 -1	 0.000000	 9.234109
38	 5	 5	 1	 3.295029	 -1	 0.000000	 14.781807
39	 5	 5	 1	 3.745058	 -1	 0.000000	 6.649450
40	 5	 5	 1	 11.314613	 -1	 0.000000	 8.440383
41	 5	 5	 1	 4.703284	 -1	 0.000000	 4.872602
42	 5	 5	 1	 2.975495	 -1	 0.000000	 11.225403
43	 5	 5	 1	 1.559929	 -1	 0.000000	 5.775875
44	 5	 5	 1	 2.544756	 -1	 0.000000	 10.412584
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
449	 5	 5	 1	 4.238302	 -1	 0.000000	 5.178436
450	 5	 5	 1	 5.491790	 -1	 0.000000	 7.584321
451	 5	 5	 1	 12.927375	 -1	 0.000000	 5.715941
452	 5	 5	 1	 6.026088	 -1	 0.000000	 4.507897
453	 5	 5	 1	 6.787748	 -1	 0.000000	 5.386415
454	 5	 5	 1	 9.679535	 -1	 0.000000	 4.428377
455	 5	 5	 1	 10.363488	 -1	 0.000000	 8.201705
456	 5	 5	 1	 9.603983	 -1	 0.000000	 5.935289
457	 5	 5	 1	 7.657669	 -1	 0.000000	 2.071315
458	 5	 5	 1	 6.917705	 -1	 0.000000	 8.143002
459	 5	 5	 1	 12.583968	 -1	 0.000000	 4.783597
460	 5	 5	 1	 4.902435	 -1	 0.000000	 6.260053
461	 5	 5	 1	 15.609723	 -1	 0.000000	 5.356432
462	 5	 5	 1	 9.338181	 -1	 0.000000	 4.903594
463	 5	 5	 1	 7.299311	 -1	 0.000000	 5.072107
464	 5	 5	 1	 4.842957	 -1	 0.000000	 8.955671
465	 5	 5	 0	 1000.000000	 -1	 0.000000	 5.985050
46	 5	 5	 1	 3.753883	 -1	 0.000000	 5.262232
47	 5	 5	 1	 18.933695	 -1	 0.000000	 5.783799
48	 5	 5	 1	 3.525093	 -1	 0.000000	 10.234142
49	 5	 5	 1	 10.859656	 -1	 0.000000	 5.459517
50	 5	 5	 1	 5.235776	 -1	 0.000000	 8.831306
51	 5	 5	 1	 8.878446	 -1	 0.000000	 8.661356
52	 5	 5	 1	 7.004441	 -1	 0.000000	 5.059411
53	 5	 5	 1	 3.304464	 -1	 0.000000	 6.079717
54	 5	 5	 1	 15.015455	 -1	 0.000000	 6.024168
55	 5	 5	 1	 7.239148	 -1	 0.000000	 9.200252
56	 5	 5	 1	 2.009607	 -1	 0.000000	 5.272999
57	 5	 5	 1	 3.241121	 -1	 0.000000	 4.565017
58	 5	 5	 1	 3.821731	 -1	 0.000000	 4.418404
59	 5	 5	 1	 8.039689	 -1	 0.000000	 6.789825
60	 5	 5	 1	 8.491325	 -1	 0.000000	 4.220553
61	 5	 5	 1	 22.538530	 -1	 0.000000	 4.575739
62	 5	 5	 1	 20.520127	 -1	 0.000000	 7.431602
63	 5	 5	 1	 2.607474	 -1	 0.000000	 7.609035
64	 5	 5	 1	 11.225201	 -1	 0.000000	 5.749508
65	 5	 5	 1	 1.280825	 -1	 0.000000	 9.293222
66	 5	 5	 1	 6.033523	 -1	 0.000000	 9.216846
67	 5	 5	 1	 4.148071	 -1	 0.000000	 4.093786
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
492	 5	 5	 1	 18.100227	 -1	 0.000000	 6.823783
493	 5	 5	 1	 2.317940	 -1	 0.000000	 4.155763
494	 5	 5	 1	 4.456582	 -1	 0.000000	 5.188161
495	 5	 5	 1	 3.750950	 -1	 0.000000	 7.040170
496	 5	 5	 1	 10.091105	 -1	 0.000000	 5.295401
497	 5	 5	 1	 7.111592	 -1	 0.000000	 3.180156
498	 5	 5	 1	 6.079690	 -1	 0.000000	 5.257844
499	 5	 5	 1	 1.379906	 -1	 0.000000	 3.937052
0	 7	 7	 1	 16.316687	 -1	 0.000000	 5.555050
1	 7	 7	 1	 13.989164	 -1	 0.000000	 5.760880
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 7	 7	 1	 31.858662	 -1	 0.000000	 4.852054
1	 7	 7	 1	 8.649800	 -1	 0.000000	 7.027613
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
473	 9	 9	 0	 333.963902	 -1	 0.000000	 4.689934
474	 9	 9	 0	 251.020946	 -1	 0.000000	 4.979797
475	 9	 9	 0	 268.104406	 -1	 0.000000	 4.693424
476	 9	 9	 1	 173.177217	 -1	 0.000000	 10.159823
477	 9	 9	 1	 238.828879	 -1	 0.000000	 10.913527
478	 9	 9	 1	 260.922705	 -1	 0.000000	 7.902949
479	 9	 9	 1	 194.731289	 -1	 0.000000	 7.448435
480	 9	 9	 0	 293.183067	 -1	 0.000000	 5.202304
481	 9	 9	 1	 238.091794	 -1	 0.000000	 6.334253
482	 9	 9	 1	 191.406345	 -1	 0.000000	 18.450996
483	 9	 9	 0	 274.359047	 -1	 0.000000	 4.691838
484	 9	 9	 0	 204.008026	 -1	 0.000000	 13.831067
485	 9	 9	 1	 183.306380	 -1	 0.000000	 7.685748
486	 9	 9	 1	 197.010825	 -1	 0.000000	 6.839509
487	 9	 9	 1	 214.457139	 -1	 0.000000	 4.827236
488	 9	 9	 1	 264.731816	 -1	 0.000000	 5.911913
489	 9	 9	 1	 272.937666	 -1	 0.000000	 4.528904
490	 9	 9	 1	 154.175348	 -1	 0.000000	 9.287790
491	 9	 9	 0	 310.422218	 -1	 0.000000	 4.706317
492	 9	 9	 1	 323.351836	 -1	 0.000000	 3.946905
493	 9	 9	 1	 205.499139	 -1	 0.000000	 4.444301
494	 9	 9	 1	 244.807754	 -1	 0.000000	 5.512959
495	 9	 9	 0	 299.103144	 -1	 0.000000	 4.402100
496	 9	 9	 1	 263.744058	 -1	 0.000000	 4.610897
497	 9	 9	 1	 173.984575	 -1	 0.000000	 3.941697
498	 9	 9	 0	 346.449449	 -1	 0.000000	 4.892884
499	 9	 9	 1	 244.971642	 -1	 0.000000	 9.936984
0	 9	 9	 1	 164.238265	 -1	 0.000000	 8.494940
1	 9	 9	 1	 277.808537	 -1	 0.000000	 5.027693
2	 9	 9	 1	 297.885466	 -1	 0.000000	 13.348363
3	 9	 9	 1	 269.021805	 -1	 0.000000	 5.016704
4	 9	 9	 1	 224.181572	 -1	 0.000000	 5.733160
5	 9	 9	 1	 248.635935	 -1	 0.000000	 5.277398
6	 9	 9	 0	 383.186939	 -1	 0.000000	 6.004246
7	 9	 9	 1	 155.893225	 -1	 0.000000	 19.960480
8	 9	 9	 0	 272.121089	 -1	 0.000000	 5.929047
9	 9	 9	 1	 213.871327	 -1	 0.000000	 5.610792
10	 9	 9	 1	 239.839375	 -1	 0.000000	 8.325022
11	 9	 9	 1	 176.393938	 -1	 0.000000	 5.759857
12	 9	 9	 1	 216.767102	 -1	 0.000000	 7.253962
13	 9	 9	 1	 304.118851	 -1	 0.000000	 4.969571
14	 9	 9	 1	 227.913651	 -1	 0.000000	 8.260332
15	 9	 9	 1	 262.851195	 -1	 0.000000	 6.059590
16	 9	 9	 1	 302.837327	 -1	 0.000000	 4.825652
17	 9	 9	 1	 191.229260	 -1	 0.000000	 5.281612
18	 9	 9	 0	 248.928842	 -1	 0.000000	 5.438694
19	 9	 9	 0	 260.849591	 -1	 0.000000	 6.866757
20	 9	 9	 1	 198.753240	 -1	 0.000000	 7.315612
21	 9	 9	 1	 215.390640	 -1	 0.000000	 5.331381
22	 9	 9	 1	 225.107420	 -1	 0.000000	 6.606291
23	 9	 9	 0	 336.382351	 -1	 0.000000	 4.057410
24	 9	 9	 0	 297.372396	 -1	 0.000000	 4.383211
25	 9	 9	 1	 264.123052	 -1	 0.000000	 6.369896
26	 9	 9	 1	 249.487083	 -1	 0.000000	 4.695309
27	 9	 9	 0	 209.387291	 -1	 0.000000	 6.592610
28	 9	 9	 1	 219.982360	 -1	 0.000000	 6.814399
29	 9	 9	 1	 299.063472	 -1	 0.000000	 6.069781
30	 9	 9	 0	 434.746257	 -1	 0.000000	 9.438883
31	 9	 9	 1	 144.088466	 -1	 0.000000	 24.035543
32	 9	 9	 1	 239.901026	 -1	 0.000000	 6.263021
33	 9	 9	 1	 229.490023	 -1	 0.000000	 6.114254
34	 9	 9	 1	 243.837242	 -1	 0.000000	 5.258257
35	 9	 9	 1	 257.113588	 -1	 0.000000	 5.283700
36	 9	 9	 1	 309.082867	 -1	 0.000000	 3.934922
37	 9	 9	 0	 310.185306	 -1	 0.000000	 8.239659
38	 9	 9	 1	 273.723749	 -1	 0.000000	 5.374248
39	 9	 9	 1	 138.733227	 -1	 0.000000	 3.331460
40	 9	 9	 1	 247.076121	 -1	 0.000000	 4.519595
41	 9	 9	 1	 198.445033	 -1	 0.000000	 6.437206
42	 9	 9	 0	 299.408814	 -1	 0.000000	 3.952406
43	 9	 9	 1	 317.637012	 -1	 0.000000	 4.682416
44	 9	 9	 1	 235.241238	 -1	 0.000000	 5.603342
45	 9	 9	 1	 248.129047	 -1	 0.000000	 3.929528
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
485	 9	 9	 1	 240.265573	 -1	 0.000000	 4.320154
486	 9	 9	 1	 249.442196	 -1	 0.000000	 5.971641
487	 9	 9	 1	 277.925704	 -1	 0.000000	 6.330752
488	 9	 9	 1	 231.265748	 -1	 0.000000	 4.759016
489	 9	 9	 0	 283.682640	 -1	 0.000000	 5.226395
490	 9	 9	 1	 245.969284	 -1	 0.000000	 6.040812
491	 9	 9	 1	 226.557950	 -1	 0.000000	 5.437424
492	 9	 9	 0	 293.078950	 -1	 0.000000	 4.957425
493	 9	 9	 0	 288.261807	 -1	 0.000000	 14.323829
494	 9	 9	 1	 198.560192	 -1	 0.000000	 4.057012
495	 9	 9	 1	 181.216407	 -1	 0.000000	 5.150256
496	 9	 9	 1	 218.547091	 -1	 0.000000	 6.361605
497	 9	 9	 0	 272.013289	 -1	 0.000000	 5.286123
498	 9	 9	 0	 277.426788	 -1	 0.000000	 5.942999
499	 9	 9	 1	 213.707232	 -1	 0.000000	 6.324822
0	 11	 11	 0	 330.653720	 -1	 0.000000	 6.096384
1	 11	 11	 0	 371.777049	 -1	 0.000000	 6.351016
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 11	 11	 0	 365.656183	 -1	 0.000000	 7.291883
1	 11	 11	 0	 420.306699	 -1	 0.000000	 11.027221
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 10	 10	 0	 470.824529	 -1	 0.000000	 5.003986
1	 10	 10	 0	 472.013995	 -1	 0.000000	 5.136888
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
