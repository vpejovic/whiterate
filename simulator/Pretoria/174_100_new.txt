>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 13	 13	 1	 0.000652	 -1	 0.000000	 13.950438
1	 13	 13	 1	 0.000794	 -1	 0.000000	 4.199300
2	 13	 13	 1	 0.004170	 -1	 0.000000	 4.640646
3	 13	 13	 1	 0.004286	 -1	 0.000000	 4.854574
4	 13	 13	 1	 0.001409	 -1	 0.000000	 5.915014
5	 13	 13	 1	 0.000199	 -1	 0.000000	 5.952281
6	 13	 13	 1	 0.007804	 -1	 0.000000	 7.096445
7	 13	 13	 1	 0.001080	 -1	 0.000000	 7.662956
8	 13	 13	 1	 0.000185	 -1	 0.000000	 6.174644
9	 13	 13	 1	 0.000490	 -1	 0.000000	 4.624279
10	 13	 13	 1	 0.001230	 -1	 0.000000	 9.016182
11	 13	 13	 1	 0.000181	 -1	 0.000000	 5.444677
12	 13	 13	 1	 0.003450	 -1	 0.000000	 5.384344
13	 13	 13	 1	 0.000786	 -1	 0.000000	 7.143453
14	 13	 13	 1	 0.001812	 -1	 0.000000	 3.576144
15	 13	 13	 1	 0.001928	 -1	 0.000000	 6.213956
16	 13	 13	 1	 0.000469	 -1	 0.000000	 5.537249
17	 13	 13	 1	 0.001820	 -1	 0.000000	 3.172119
18	 13	 13	 1	 0.001000	 -1	 0.000000	 6.865490
19	 13	 13	 1	 0.000342	 -1	 0.000000	 7.092602
20	 13	 13	 1	 0.001984	 -1	 0.000000	 5.516967
21	 13	 13	 1	 0.010165	 -1	 0.000000	 3.827117
22	 13	 13	 1	 0.009112	 -1	 0.000000	 6.888005
23	 13	 13	 1	 0.002190	 -1	 0.000000	 5.811445
24	 13	 13	 1	 0.000765	 -1	 0.000000	 8.092658
25	 13	 13	 1	 0.001606	 -1	 0.000000	 10.317623
26	 13	 13	 1	 0.000558	 -1	 0.000000	 8.697594
27	 13	 13	 1	 0.000619	 -1	 0.000000	 5.550834
28	 13	 13	 1	 0.069335	 -1	 0.000000	 3.683185
29	 13	 13	 1	 0.001499	 -1	 0.000000	 16.904556
30	 13	 13	 1	 0.000750	 -1	 0.000000	 6.175062
31	 13	 13	 1	 0.001184	 -1	 0.000000	 5.508268
32	 13	 13	 1	 0.000189	 -1	 0.000000	 8.657727
33	 13	 13	 1	 0.000118	 -1	 0.000000	 7.689723
34	 13	 13	 1	 0.017519	 -1	 0.000000	 6.182595
35	 13	 13	 1	 0.000299	 -1	 0.000000	 12.778003
36	 13	 13	 1	 0.000979	 -1	 0.000000	 5.303836
37	 13	 13	 1	 0.000857	 -1	 0.000000	 3.827918
38	 13	 13	 1	 0.001184	 -1	 0.000000	 10.182468
39	 13	 13	 1	 0.001193	 -1	 0.000000	 4.220603
40	 13	 13	 1	 0.000426	 -1	 0.000000	 6.094141
41	 13	 13	 1	 0.005964	 -1	 0.000000	 6.634948
42	 13	 13	 1	 0.000191	 -1	 0.000000	 8.263225
43	 13	 13	 1	 0.001571	 -1	 0.000000	 6.446161
44	 13	 13	 1	 0.005621	 -1	 0.000000	 4.987454
45	 13	 13	 1	 0.000768	 -1	 0.000000	 5.524599
46	 13	 13	 1	 0.003661	 -1	 0.000000	 6.115755
47	 13	 13	 1	 0.000144	 -1	 0.000000	 4.768400
48	 13	 13	 1	 0.000430	 -1	 0.000000	 6.990190
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 15	 15	 1	 0.028862	 -1	 0.000000	 3.867509
1	 15	 15	 1	 0.001938	 -1	 0.000000	 8.655699
2	 15	 15	 1	 5.084519	 -1	 0.000000	 9.869050
3	 15	 15	 1	 0.023099	 -1	 0.000000	 5.416686
4	 15	 15	 1	 0.008292	 -1	 0.000000	 7.820190
5	 15	 15	 1	 0.007040	 -1	 0.000000	 3.963288
6	 15	 15	 1	 0.008351	 -1	 0.000000	 9.464898
7	 15	 15	 1	 0.065669	 -1	 0.000000	 8.486220
8	 15	 15	 1	 0.211921	 -1	 0.000000	 8.593692
9	 15	 15	 1	 0.002344	 -1	 0.000000	 3.360092
10	 15	 15	 1	 0.357631	 -1	 0.000000	 8.513808
11	 15	 15	 1	 0.006427	 -1	 0.000000	 7.990254
12	 15	 15	 1	 0.098779	 -1	 0.000000	 6.128200
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 5	 5	 1	 5.210996	 -1	 0.000000	 4.326941
1	 5	 5	 1	 0.786399	 -1	 0.000000	 3.594116
2	 5	 5	 1	 2.155538	 -1	 0.000000	 8.055575
3	 5	 5	 1	 1.856259	 -1	 0.000000	 8.812608
4	 5	 5	 1	 3.169424	 -1	 0.000000	 7.505734
5	 5	 5	 1	 1.559209	 -1	 0.000000	 8.954950
6	 5	 5	 1	 4.063801	 -1	 0.000000	 7.439960
7	 5	 5	 1	 2.700443	 -1	 0.000000	 5.145779
8	 5	 5	 1	 3.580177	 -1	 0.000000	 4.625987
9	 5	 5	 1	 0.825615	 -1	 0.000000	 3.845882
10	 5	 5	 1	 2.107463	 -1	 0.000000	 4.819075
11	 5	 5	 1	 0.639538	 -1	 0.000000	 11.621161
12	 5	 5	 1	 1.945712	 -1	 0.000000	 12.803323
13	 5	 5	 1	 1.088219	 -1	 0.000000	 6.975284
14	 5	 5	 1	 3.409310	 -1	 0.000000	 6.207437
15	 5	 5	 1	 6.481292	 -1	 0.000000	 7.141144
16	 5	 5	 1	 4.114805	 -1	 0.000000	 6.587821
17	 5	 5	 1	 0.776290	 -1	 0.000000	 14.871674
18	 5	 5	 1	 0.872869	 -1	 0.000000	 15.629252
19	 5	 5	 1	 2.086375	 -1	 0.000000	 5.403231
20	 5	 5	 1	 0.882731	 -1	 0.000000	 4.688871
21	 5	 5	 1	 0.878918	 -1	 0.000000	 6.353296
22	 5	 5	 1	 2.723293	 -1	 0.000000	 10.041179
23	 5	 5	 1	 4.281228	 -1	 0.000000	 5.008698
24	 5	 5	 1	 2.623505	 -1	 0.000000	 6.403059
25	 5	 5	 1	 2.687823	 -1	 0.000000	 8.275139
26	 5	 5	 1	 3.217562	 -1	 0.000000	 5.475510
27	 5	 5	 1	 6.289332	 -1	 0.000000	 7.647243
28	 5	 5	 1	 6.763952	 -1	 0.000000	 5.376267
29	 5	 5	 1	 1.070965	 -1	 0.000000	 4.783933
30	 5	 5	 1	 1.543628	 -1	 0.000000	 16.503595
31	 5	 5	 1	 1.489869	 -1	 0.000000	 6.619210
32	 5	 5	 1	 0.538201	 -1	 0.000000	 7.423508
33	 5	 5	 1	 1.080522	 -1	 0.000000	 10.532524
34	 5	 5	 1	 6.411730	 -1	 0.000000	 6.626594
35	 5	 5	 1	 3.107244	 -1	 0.000000	 8.983160
36	 5	 5	 1	 1.671051	 -1	 0.000000	 3.691713
37	 5	 5	 1	 7.792040	 -1	 0.000000	 5.420007
38	 5	 5	 1	 11.217667	 -1	 0.000000	 5.292701
39	 5	 5	 1	 5.969227	 -1	 0.000000	 6.598735
40	 5	 5	 1	 4.217175	 -1	 0.000000	 7.447540
41	 5	 5	 1	 1.341917	 -1	 0.000000	 4.127290
42	 5	 5	 1	 1.108284	 -1	 0.000000	 7.919927
43	 5	 5	 1	 2.475674	 -1	 0.000000	 9.820234
44	 5	 5	 1	 4.120735	 -1	 0.000000	 8.322664
45	 5	 5	 1	 1.145477	 -1	 0.000000	 6.549888
46	 5	 5	 1	 0.757870	 -1	 0.000000	 9.386390
47	 5	 5	 1	 24.169338	 -1	 0.000000	 6.188386
48	 5	 5	 1	 3.069764	 -1	 0.000000	 5.462772
49	 5	 5	 1	 1.256958	 -1	 0.000000	 5.604873
50	 5	 5	 1	 2.103610	 -1	 0.000000	 4.714112
51	 5	 5	 1	 0.895681	 -1	 0.000000	 6.839833
52	 5	 5	 1	 1.367181	 -1	 0.000000	 4.905718
53	 5	 5	 1	 3.591332	 -1	 0.000000	 6.815547
54	 5	 5	 1	 2.640331	 -1	 0.000000	 6.645503
55	 5	 5	 1	 12.128176	 -1	 0.000000	 5.226000
56	 5	 5	 1	 3.492720	 -1	 0.000000	 6.714115
57	 5	 5	 1	 2.258946	 -1	 0.000000	 9.607819
58	 5	 5	 1	 3.832517	 -1	 0.000000	 4.409442
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 5	 5	 1	 2.336823	 -1	 0.000000	 4.912339
1	 5	 5	 1	 3.528700	 -1	 0.000000	 5.587467
2	 5	 5	 1	 1.649483	 -1	 0.000000	 6.755395
3	 5	 5	 1	 2.502293	 -1	 0.000000	 3.933769
4	 5	 5	 1	 1.142376	 -1	 0.000000	 10.020505
5	 5	 5	 1	 3.664476	 -1	 0.000000	 9.901921
6	 5	 5	 1	 1.361648	 -1	 0.000000	 7.423512
7	 5	 5	 1	 5.541180	 -1	 0.000000	 7.511059
8	 5	 5	 1	 2.718125	 -1	 0.000000	 6.599199
9	 5	 5	 1	 1.818851	 -1	 0.000000	 4.888507
10	 5	 5	 1	 13.205997	 -1	 0.000000	 5.005877
11	 5	 5	 1	 2.008070	 -1	 0.000000	 9.446493
12	 5	 5	 1	 6.604945	 -1	 0.000000	 6.931328
13	 5	 5	 1	 1.203234	 -1	 0.000000	 4.756349
14	 5	 5	 1	 3.627366	 -1	 0.000000	 5.721152
15	 5	 5	 1	 2.404160	 -1	 0.000000	 3.469331
16	 5	 5	 1	 3.448853	 -1	 0.000000	 11.255381
17	 5	 5	 1	 0.500072	 -1	 0.000000	 6.995119
18	 5	 5	 1	 3.976884	 -1	 0.000000	 4.323433
19	 5	 5	 1	 2.693803	 -1	 0.000000	 6.423505
20	 5	 5	 1	 1.094582	 -1	 0.000000	 8.495135
21	 5	 5	 1	 1.853990	 -1	 0.000000	 6.578004
22	 5	 5	 1	 3.827899	 -1	 0.000000	 6.455295
23	 5	 5	 1	 9.720630	 -1	 0.000000	 11.503622
24	 5	 5	 1	 3.832284	 -1	 0.000000	 5.037277
25	 5	 5	 1	 2.388222	 -1	 0.000000	 4.486894
26	 5	 5	 1	 1.725798	 -1	 0.000000	 4.563063
27	 5	 5	 1	 9.151029	 -1	 0.000000	 7.218452
28	 5	 5	 1	 0.524943	 -1	 0.000000	 7.258982
29	 5	 5	 1	 0.547083	 -1	 0.000000	 5.276576
30	 5	 5	 1	 4.431457	 -1	 0.000000	 5.421381
31	 5	 5	 1	 5.432536	 -1	 0.000000	 5.719565
32	 5	 5	 1	 4.165060	 -1	 0.000000	 4.457814
33	 5	 5	 1	 0.888143	 -1	 0.000000	 10.994086
34	 5	 5	 1	 1.001863	 -1	 0.000000	 4.416553
35	 5	 5	 1	 0.736252	 -1	 0.000000	 4.298188
36	 5	 5	 1	 4.922094	 -1	 0.000000	 8.241227
37	 5	 5	 1	 4.989342	 -1	 0.000000	 5.708662
38	 5	 5	 1	 3.691603	 -1	 0.000000	 6.672325
39	 5	 5	 1	 2.293577	 -1	 0.000000	 6.490294
40	 5	 5	 1	 1.020922	 -1	 0.000000	 5.746433
41	 5	 5	 1	 2.425000	 -1	 0.000000	 9.511711
42	 5	 5	 1	 2.647894	 -1	 0.000000	 4.407074
43	 5	 5	 1	 4.480448	 -1	 0.000000	 9.286457
44	 5	 5	 1	 0.848137	 -1	 0.000000	 5.211385
45	 5	 5	 1	 1.904197	 -1	 0.000000	 4.448476
46	 5	 5	 1	 2.710279	 -1	 0.000000	 10.059878
47	 5	 5	 1	 0.824408	 -1	 0.000000	 7.743140
48	 5	 5	 1	 1.982979	 -1	 0.000000	 4.928676
49	 5	 5	 1	 3.380050	 -1	 0.000000	 8.877872
50	 5	 5	 1	 2.753617	 -1	 0.000000	 7.573108
51	 5	 5	 1	 1.392571	 -1	 0.000000	 4.659513
52	 5	 5	 1	 6.216063	 -1	 0.000000	 6.567486
53	 5	 5	 1	 8.046780	 -1	 0.000000	 5.902842
54	 5	 5	 1	 1.164494	 -1	 0.000000	 5.433926
55	 5	 5	 1	 0.488592	 -1	 0.000000	 10.421167
56	 5	 5	 1	 0.704767	 -1	 0.000000	 10.853232
57	 5	 5	 1	 3.580727	 -1	 0.000000	 8.038493
58	 5	 5	 1	 1.578678	 -1	 0.000000	 10.038133
59	 5	 5	 1	 3.389995	 -1	 0.000000	 6.125127
60	 5	 5	 1	 9.531224	 -1	 0.000000	 4.319383
61	 5	 5	 1	 8.892320	 -1	 0.000000	 6.135186
62	 5	 5	 1	 3.485499	 -1	 0.000000	 8.725866
63	 5	 5	 1	 0.899632	 -1	 0.000000	 8.235106
64	 5	 5	 1	 3.139189	 -1	 0.000000	 5.234468
65	 5	 5	 1	 6.509283	 -1	 0.000000	 10.463006
66	 5	 5	 1	 1.817695	 -1	 0.000000	 4.448880
67	 5	 5	 1	 10.526343	 -1	 0.000000	 7.226783
68	 5	 5	 1	 10.034365	 -1	 0.000000	 6.849455
69	 5	 5	 1	 2.317060	 -1	 0.000000	 10.997451
70	 5	 5	 1	 3.467337	 -1	 0.000000	 5.111421
71	 5	 5	 1	 5.954189	 -1	 0.000000	 4.479600
72	 5	 5	 1	 8.111547	 -1	 0.000000	 7.970195
73	 5	 5	 1	 2.510293	 -1	 0.000000	 9.261996
74	 5	 5	 1	 3.196960	 -1	 0.000000	 4.351743
75	 5	 5	 1	 1.504361	 -1	 0.000000	 6.168493
76	 5	 5	 1	 2.788793	 -1	 0.000000	 8.992789
77	 5	 5	 1	 2.349089	 -1	 0.000000	 8.178385
78	 5	 5	 1	 4.247234	 -1	 0.000000	 7.147285
79	 5	 5	 1	 2.283418	 -1	 0.000000	 6.235573
80	 5	 5	 1	 8.480017	 -1	 0.000000	 7.614540
81	 5	 5	 1	 4.961956	 -1	 0.000000	 3.664642
82	 5	 5	 1	 5.671680	 -1	 0.000000	 3.820953
83	 5	 5	 1	 0.845162	 -1	 0.000000	 9.986856
84	 5	 5	 1	 2.178051	 -1	 0.000000	 11.394205
85	 5	 5	 1	 8.890267	 -1	 0.000000	 11.284558
86	 5	 5	 1	 6.935265	 -1	 0.000000	 5.787923
87	 5	 5	 1	 0.355817	 -1	 0.000000	 5.877162
88	 5	 5	 1	 3.290019	 -1	 0.000000	 3.842937
89	 5	 5	 1	 6.881960	 -1	 0.000000	 13.270971
90	 5	 5	 1	 2.372439	 -1	 0.000000	 7.922812
91	 5	 5	 1	 8.228423	 -1	 0.000000	 6.253086
92	 5	 5	 1	 1.511428	 -1	 0.000000	 7.962355
93	 5	 5	 1	 1.516291	 -1	 0.000000	 5.767400
94	 5	 5	 1	 2.973139	 -1	 0.000000	 18.098495
95	 5	 5	 1	 3.409950	 -1	 0.000000	 5.874318
96	 5	 5	 1	 1.791488	 -1	 0.000000	 5.486915
97	 5	 5	 1	 4.070304	 -1	 0.000000	 6.359553
98	 5	 5	 1	 2.676536	 -1	 0.000000	 5.510898
99	 5	 5	 1	 4.847179	 -1	 0.000000	 6.280666
100	 5	 5	 1	 5.404528	 -1	 0.000000	 7.737916
101	 5	 5	 1	 4.694830	 -1	 0.000000	 3.172575
102	 5	 5	 1	 2.805010	 -1	 0.000000	 4.981041
103	 5	 5	 1	 2.892446	 -1	 0.000000	 8.943751
104	 5	 5	 1	 2.134193	 -1	 0.000000	 5.142585
105	 5	 5	 1	 3.828541	 -1	 0.000000	 6.183459
106	 5	 5	 1	 5.933819	 -1	 0.000000	 6.855299
107	 5	 5	 1	 7.749223	 -1	 0.000000	 5.551383
108	 5	 5	 1	 2.770414	 -1	 0.000000	 10.167606
109	 5	 5	 1	 2.831120	 -1	 0.000000	 3.790013
110	 5	 5	 1	 11.214230	 -1	 0.000000	 4.147494
111	 5	 5	 1	 3.113218	 -1	 0.000000	 10.227077
112	 5	 5	 1	 5.829355	 -1	 0.000000	 4.305310
113	 5	 5	 1	 3.860891	 -1	 0.000000	 7.301600
114	 5	 5	 1	 6.113858	 -1	 0.000000	 13.178805
115	 5	 5	 1	 3.600340	 -1	 0.000000	 7.141212
116	 5	 5	 1	 7.293545	 -1	 0.000000	 4.225613
117	 5	 5	 1	 6.969435	 -1	 0.000000	 9.534887
118	 5	 5	 1	 2.065252	 -1	 0.000000	 14.021854
119	 5	 5	 1	 0.486117	 -1	 0.000000	 6.540110
120	 5	 5	 1	 3.910806	 -1	 0.000000	 9.448833
121	 5	 5	 1	 0.961530	 -1	 0.000000	 6.809972
122	 5	 5	 1	 7.456710	 -1	 0.000000	 10.141452
123	 5	 5	 1	 5.263616	 -1	 0.000000	 9.401358
124	 5	 5	 1	 2.842044	 -1	 0.000000	 5.997234
125	 5	 5	 1	 5.168124	 -1	 0.000000	 3.652050
126	 5	 5	 1	 0.915073	 -1	 0.000000	 9.259378
127	 5	 5	 1	 1.056823	 -1	 0.000000	 4.393530
128	 5	 5	 1	 1.034599	 -1	 0.000000	 8.279965
129	 5	 5	 1	 1.349646	 -1	 0.000000	 5.734584
130	 5	 5	 1	 8.358149	 -1	 0.000000	 9.517596
131	 5	 5	 1	 4.106909	 -1	 0.000000	 8.383932
132	 5	 5	 1	 1.122275	 -1	 0.000000	 8.936297
133	 5	 5	 1	 1.442679	 -1	 0.000000	 4.664632
134	 5	 5	 1	 0.858417	 -1	 0.000000	 6.305748
135	 5	 5	 1	 5.432831	 -1	 0.000000	 6.244544
136	 5	 5	 1	 1.453867	 -1	 0.000000	 5.312165
137	 5	 5	 1	 1.134155	 -1	 0.000000	 4.906608
138	 5	 5	 1	 1.546934	 -1	 0.000000	 4.390750
139	 5	 5	 1	 11.039397	 -1	 0.000000	 8.078268
140	 5	 5	 1	 2.529088	 -1	 0.000000	 8.743029
141	 5	 5	 1	 2.619041	 -1	 0.000000	 6.982860
142	 5	 5	 1	 4.660151	 -1	 0.000000	 5.805679
143	 5	 5	 1	 1.676220	 -1	 0.000000	 9.953182
144	 5	 5	 1	 5.133605	 -1	 0.000000	 5.439819
145	 5	 5	 1	 0.975431	 -1	 0.000000	 5.411276
146	 5	 5	 1	 2.124010	 -1	 0.000000	 6.865675
147	 5	 5	 1	 7.407678	 -1	 0.000000	 5.690567
148	 5	 5	 1	 1.083051	 -1	 0.000000	 4.712348
149	 5	 5	 1	 2.624050	 -1	 0.000000	 3.959907
150	 5	 5	 1	 3.409534	 -1	 0.000000	 11.423257
151	 5	 5	 1	 3.009159	 -1	 0.000000	 14.689840
152	 5	 5	 1	 3.595599	 -1	 0.000000	 8.407709
153	 5	 5	 1	 3.846792	 -1	 0.000000	 4.629292
154	 5	 5	 1	 1.319269	 -1	 0.000000	 7.891103
155	 5	 5	 1	 5.536972	 -1	 0.000000	 4.116335
156	 5	 5	 1	 1.243639	 -1	 0.000000	 5.518337
157	 5	 5	 1	 5.172636	 -1	 0.000000	 3.664512
158	 5	 5	 1	 1.935542	 -1	 0.000000	 4.828374
159	 5	 5	 1	 3.330331	 -1	 0.000000	 5.569945
160	 5	 5	 1	 2.486156	 -1	 0.000000	 5.589577
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 7	 7	 1	 21.856435	 -1	 0.000000	 9.628916
1	 7	 7	 1	 7.487696	 -1	 0.000000	 10.644243
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 7	 7	 1	 21.332759	 -1	 0.000000	 6.009884
1	 7	 7	 1	 13.500342	 -1	 0.000000	 5.064086
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 9	 9	 0	 358.528343	 -1	 0.000000	 4.339110
1	 9	 9	 0	 334.368607	 -1	 0.000000	 8.648570
2	 9	 9	 1	 193.657607	 -1	 0.000000	 6.315679
3	 9	 9	 1	 220.890011	 -1	 0.000000	 5.833421
4	 9	 9	 0	 323.303765	 -1	 0.000000	 5.380485
5	 9	 9	 0	 349.703043	 -1	 0.000000	 8.485344
6	 9	 9	 1	 252.068041	 -1	 0.000000	 5.696730
7	 9	 9	 0	 254.665781	 -1	 0.000000	 6.116203
8	 9	 9	 1	 177.628724	 -1	 0.000000	 9.275900
9	 9	 9	 0	 403.691457	 -1	 0.000000	 3.807387
10	 9	 9	 1	 158.888902	 -1	 0.000000	 8.019181
11	 9	 9	 1	 164.255124	 -1	 0.000000	 14.435154
12	 9	 9	 0	 340.899269	 -1	 0.000000	 14.235497
13	 9	 9	 0	 376.678893	 -1	 0.000000	 4.950694
14	 9	 9	 0	 314.150552	 -1	 0.000000	 5.611845
15	 9	 9	 1	 209.607986	 -1	 0.000000	 5.158766
16	 9	 9	 0	 384.274797	 -1	 0.000000	 3.850196
17	 9	 9	 0	 327.781771	 -1	 0.000000	 8.697623
18	 9	 9	 0	 186.021348	 -1	 0.000000	 6.045720
19	 9	 9	 0	 283.198546	 -1	 0.000000	 8.770799
20	 9	 9	 0	 348.002212	 -1	 0.000000	 5.810586
21	 9	 9	 0	 263.484430	 -1	 0.000000	 9.244247
22	 9	 9	 1	 256.585161	 -1	 0.000000	 4.293530
23	 9	 9	 0	 349.411200	 -1	 0.000000	 9.065041
24	 9	 9	 1	 174.949538	 -1	 0.000000	 8.151057
25	 9	 9	 0	 337.690214	 -1	 0.000000	 8.639708
26	 9	 9	 0	 417.805615	 -1	 0.000000	 13.188272
27	 9	 9	 0	 185.565663	 -1	 0.000000	 6.038904
28	 9	 9	 0	 402.657496	 -1	 0.000000	 10.601502
29	 9	 9	 0	 272.050641	 -1	 0.000000	 9.234280
30	 9	 9	 0	 347.164424	 -1	 0.000000	 5.865183
31	 9	 9	 1	 168.431610	 -1	 0.000000	 8.793127
32	 9	 9	 1	 201.186968	 -1	 0.000000	 4.903440
33	 9	 9	 0	 210.049950	 -1	 0.000000	 4.295445
34	 9	 9	 0	 315.241989	 -1	 0.000000	 5.744016
35	 9	 9	 1	 191.619532	 -1	 0.000000	 4.400755
36	 9	 9	 1	 202.783245	 -1	 0.000000	 6.623183
37	 9	 9	 0	 265.819176	 -1	 0.000000	 6.194778
38	 9	 9	 0	 356.051620	 -1	 0.000000	 6.214493
39	 9	 9	 0	 277.908940	 -1	 0.000000	 8.117635
40	 9	 9	 1	 220.425004	 -1	 0.000000	 5.175799
41	 9	 9	 0	 377.152480	 -1	 0.000000	 9.073337
42	 9	 9	 0	 257.613063	 -1	 0.000000	 8.964406
43	 9	 9	 0	 361.789602	 -1	 0.000000	 6.584494
44	 9	 9	 0	 369.430739	 -1	 0.000000	 9.704054
45	 9	 9	 0	 384.892737	 -1	 0.000000	 8.995528
46	 9	 9	 1	 181.571782	 -1	 0.000000	 7.335927
47	 9	 9	 1	 173.170444	 -1	 0.000000	 6.391627
48	 9	 9	 0	 319.943964	 -1	 0.000000	 4.666283
49	 9	 9	 0	 229.401299	 -1	 0.000000	 7.479564
50	 9	 9	 1	 272.101815	 -1	 0.000000	 5.939241
51	 9	 9	 1	 270.224207	 -1	 0.000000	 7.647744
52	 9	 9	 0	 345.389735	 -1	 0.000000	 7.302259
53	 9	 9	 0	 384.638679	 -1	 0.000000	 4.476181
54	 9	 9	 0	 277.632512	 -1	 0.000000	 6.013214
55	 9	 9	 0	 382.912386	 -1	 0.000000	 11.589585
56	 9	 9	 1	 188.238629	 -1	 0.000000	 8.809214
57	 9	 9	 0	 373.159624	 -1	 0.000000	 4.488481
58	 9	 9	 0	 404.560786	 -1	 0.000000	 3.683229
59	 9	 9	 1	 180.365676	 -1	 0.000000	 9.433792
60	 9	 9	 0	 409.946147	 -1	 0.000000	 9.519650
61	 9	 9	 1	 243.291612	 -1	 0.000000	 5.426477
62	 9	 9	 1	 202.859371	 -1	 0.000000	 13.646066
63	 9	 9	 1	 195.363456	 -1	 0.000000	 9.577913
64	 9	 9	 1	 169.254273	 -1	 0.000000	 7.546635
65	 9	 9	 1	 164.554208	 -1	 0.000000	 7.086228
66	 9	 9	 0	 353.261953	 -1	 0.000000	 6.173227
67	 9	 9	 1	 158.763979	 -1	 0.000000	 6.299438
68	 9	 9	 1	 166.319057	 -1	 0.000000	 11.563801
69	 9	 9	 1	 161.947515	 -1	 0.000000	 8.351163
97	 9	 9	 0	 342.788459	 -1	 0.000000	 7.217439
122	 9	 9	 0	 340.589312	 -1	 0.000000	 3.534848
152	 9	 9	 1	 172.165841	 -1	 0.000000	 7.786791
390	 9	 9	 0	 246.058358	 -1	 0.000000	 6.577536
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 11	 11	 0	 261.303918	 -1	 0.000000	 8.328111
1	 11	 11	 1	 267.733895	 -1	 0.000000	 5.998735
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 11	 11	 0	 367.574970	 -1	 0.000000	 6.138840
1	 11	 11	 0	 355.863874	 -1	 0.000000	 5.316451
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 10	 10	 0	 475.493517	 -1	 0.000000	 4.301486
1	 10	 10	 0	 474.498458	 -1	 0.000000	 7.644864
2	 10	 10	 0	 476.704942	 -1	 0.000000	 5.705397
3	 10	 10	 0	 468.007116	 -1	 0.000000	 4.939387
4	 10	 10	 0	 469.480984	 -1	 0.000000	 4.082739
5	 10	 10	 0	 473.631723	 -1	 0.000000	 7.513071
6	 10	 10	 0	 468.217941	 -1	 0.000000	 4.152562
7	 10	 10	 0	 475.191955	 -1	 0.000000	 4.954315
8	 10	 10	 0	 477.103222	 -1	 0.000000	 6.905775
9	 10	 10	 0	 466.002695	 -1	 0.000000	 10.432884
10	 10	 10	 0	 481.249089	 -1	 0.000000	 5.021668
11	 10	 10	 0	 481.355967	 -1	 0.000000	 4.409077
12	 10	 10	 0	 463.018677	 -1	 0.000000	 6.922393
13	 10	 10	 0	 471.916431	 -1	 0.000000	 9.468784
14	 10	 10	 0	 479.304351	 -1	 0.000000	 3.719450
15	 10	 10	 0	 476.058510	 -1	 0.000000	 4.728364
16	 10	 10	 0	 471.520780	 -1	 0.000000	 7.372602
17	 10	 10	 0	 471.856653	 -1	 0.000000	 5.724195
18	 10	 10	 0	 475.118181	 -1	 0.000000	 4.028450
19	 10	 10	 0	 476.291754	 -1	 0.000000	 4.009037
20	 10	 10	 0	 473.467973	 -1	 0.000000	 5.258800
21	 10	 10	 0	 478.992717	 -1	 0.000000	 6.192443
22	 10	 10	 0	 477.639434	 -1	 0.000000	 8.549469
23	 10	 10	 0	 471.711042	 -1	 0.000000	 8.400290
24	 10	 10	 0	 470.297212	 -1	 0.000000	 7.188880
25	 10	 10	 0	 471.742085	 -1	 0.000000	 5.442988
26	 10	 10	 0	 476.458128	 -1	 0.000000	 5.819836
27	 10	 10	 0	 480.979627	 -1	 0.000000	 3.123831
28	 10	 10	 0	 471.493499	 -1	 0.000000	 3.399942
29	 10	 10	 0	 479.664314	 -1	 0.000000	 3.554245
30	 10	 10	 0	 480.800954	 -1	 0.000000	 5.268634
31	 10	 10	 0	 475.898366	 -1	 0.000000	 3.896125
32	 10	 10	 0	 475.668962	 -1	 0.000000	 6.635899
33	 10	 10	 0	 473.117943	 -1	 0.000000	 5.549395
34	 10	 10	 0	 468.945549	 -1	 0.000000	 8.777330
35	 10	 10	 0	 476.351972	 -1	 0.000000	 8.593927
36	 10	 10	 0	 477.274173	 -1	 0.000000	 5.956083
37	 10	 10	 0	 479.010844	 -1	 0.000000	 4.143318
38	 10	 10	 0	 475.707327	 -1	 0.000000	 6.181273
39	 10	 10	 0	 477.042152	 -1	 0.000000	 5.098055
40	 10	 10	 0	 478.017842	 -1	 0.000000	 5.587862
41	 10	 10	 0	 476.162480	 -1	 0.000000	 6.746505
42	 10	 10	 0	 476.516661	 -1	 0.000000	 5.862502
43	 10	 10	 0	 477.047913	 -1	 0.000000	 5.210265
44	 10	 10	 0	 476.502410	 -1	 0.000000	 7.856709
45	 10	 10	 0	 469.316487	 -1	 0.000000	 4.718925
46	 10	 10	 0	 468.177706	 -1	 0.000000	 5.113670
47	 10	 10	 0	 479.885109	 -1	 0.000000	 9.255002
48	 10	 10	 0	 478.904662	 -1	 0.000000	 6.028904
49	 10	 10	 0	 476.559610	 -1	 0.000000	 10.057830
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
