>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   19 items of size 3312. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
170	 13	 13	 1	 0.000778	 -1	 0.000000	 6.453805
171	 13	 13	 1	 0.001310	 -1	 0.000000	 10.809916
172	 13	 13	 1	 0.018187	 -1	 0.000000	 6.272591
173	 13	 13	 1	 0.000394	 -1	 0.000000	 4.770495
174	 13	 13	 1	 0.003079	 -1	 0.000000	 8.491668
175	 13	 13	 1	 0.005928	 -1	 0.000000	 11.998850
176	 13	 13	 1	 0.002621	 -1	 0.000000	 8.270273
177	 13	 13	 1	 0.005623	 -1	 0.000000	 7.596624
178	 13	 13	 1	 0.496820	 -1	 0.000000	 7.253607
179	 13	 13	 1	 0.011034	 -1	 0.000000	 5.065691
180	 13	 13	 1	 0.000210	 -1	 0.000000	 8.230001
181	 13	 13	 1	 0.027676	 -1	 0.000000	 4.714929
182	 13	 13	 1	 0.031766	 -1	 0.000000	 4.795622
183	 13	 13	 1	 0.034321	 -1	 0.000000	 9.027359
184	 13	 13	 1	 0.009670	 -1	 0.000000	 8.698234
185	 13	 13	 1	 0.002565	 -1	 0.000000	 9.614163
186	 13	 13	 1	 0.001391	 -1	 0.000000	 7.438042
187	 13	 13	 1	 0.003265	 -1	 0.000000	 7.600989
188	 13	 13	 1	 0.011032	 -1	 0.000000	 5.192338
189	 13	 13	 1	 0.035713	 -1	 0.000000	 4.228143
190	 13	 13	 1	 0.035540	 -1	 0.000000	 7.586355
191	 13	 13	 1	 0.001314	 -1	 0.000000	 7.621843
192	 13	 13	 1	 0.000367	 -1	 0.000000	 9.282505
193	 13	 13	 1	 0.005327	 -1	 0.000000	 8.250210
194	 13	 13	 1	 0.000202	 -1	 0.000000	 8.095234
195	 13	 13	 1	 0.008824	 -1	 0.000000	 4.558230
196	 13	 13	 1	 0.003005	 -1	 0.000000	 7.032269
197	 13	 13	 1	 0.000969	 -1	 0.000000	 4.907625
198	 13	 13	 1	 0.000744	 -1	 0.000000	 5.834023
199	 13	 13	 1	 0.003895	 -1	 0.000000	 5.802008
200	 13	 13	 1	 0.244590	 -1	 0.000000	 4.367402
201	 13	 13	 1	 0.000789	 -1	 0.000000	 5.177554
202	 13	 13	 1	 0.011995	 -1	 0.000000	 3.225197
203	 13	 13	 1	 0.000551	 -1	 0.000000	 4.395132
204	 13	 13	 1	 0.013119	 -1	 0.000000	 5.695789
205	 13	 13	 1	 0.017083	 -1	 0.000000	 10.360086
206	 13	 13	 1	 0.002810	 -1	 0.000000	 4.669193
207	 13	 13	 1	 0.004290	 -1	 0.000000	 14.321945
208	 13	 13	 1	 0.000700	 -1	 0.000000	 4.559871
209	 13	 13	 1	 0.003967	 -1	 0.000000	 6.208664
210	 13	 13	 1	 0.000930	 -1	 0.000000	 6.187311
211	 13	 13	 1	 0.008959	 -1	 0.000000	 15.890953
212	 13	 13	 1	 0.001278	 -1	 0.000000	 7.941310
213	 13	 13	 1	 0.000406	 -1	 0.000000	 4.438060
214	 13	 13	 1	 0.001081	 -1	 0.000000	 10.356113
215	 13	 13	 1	 0.002339	 -1	 0.000000	 4.617527
216	 13	 13	 1	 0.001181	 -1	 0.000000	 10.617857
217	 13	 13	 1	 0.000975	 -1	 0.000000	 6.419857
218	 13	 13	 1	 0.004406	 -1	 0.000000	 6.194811
219	 13	 13	 1	 0.059679	 -1	 0.000000	 6.686364
220	 13	 13	 1	 0.002468	 -1	 0.000000	 5.132284
221	 13	 13	 1	 0.004191	 -1	 0.000000	 4.344599
222	 13	 13	 1	 0.001060	 -1	 0.000000	 7.301219
223	 13	 13	 1	 0.017422	 -1	 0.000000	 7.143824
224	 13	 13	 1	 0.003286	 -1	 0.000000	 5.934850
225	 13	 13	 1	 0.015230	 -1	 0.000000	 4.951320
226	 13	 13	 1	 0.006620	 -1	 0.000000	 6.413583
227	 13	 13	 1	 0.000627	 -1	 0.000000	 8.144109
228	 13	 13	 1	 0.050330	 -1	 0.000000	 8.383476
229	 13	 13	 1	 0.009488	 -1	 0.000000	 5.470462
230	 13	 13	 1	 0.004453	 -1	 0.000000	 5.611771
231	 13	 13	 1	 0.004947	 -1	 0.000000	 4.359784
232	 13	 13	 1	 0.007082	 -1	 0.000000	 5.585383
233	 13	 13	 1	 0.010949	 -1	 0.000000	 6.271355
234	 13	 13	 1	 0.011741	 -1	 0.000000	 6.597973
235	 13	 13	 1	 0.002631	 -1	 0.000000	 5.958416
236	 13	 13	 1	 0.009003	 -1	 0.000000	 4.985919
237	 13	 13	 1	 0.018481	 -1	 0.000000	 12.680699
238	 13	 13	 1	 0.018518	 -1	 0.000000	 7.780916
239	 13	 13	 1	 0.001062	 -1	 0.000000	 11.075294
240	 13	 13	 1	 0.001782	 -1	 0.000000	 8.754351
241	 13	 13	 1	 0.000850	 -1	 0.000000	 7.088016
242	 13	 13	 1	 0.001386	 -1	 0.000000	 12.098219
243	 13	 13	 1	 0.015909	 -1	 0.000000	 9.098347
244	 13	 13	 1	 0.011362	 -1	 0.000000	 11.032540
245	 13	 13	 1	 0.012585	 -1	 0.000000	 8.109334
246	 13	 13	 1	 0.001866	 -1	 0.000000	 7.310062
247	 13	 13	 1	 0.006334	 -1	 0.000000	 6.524171
248	 13	 13	 1	 0.007355	 -1	 0.000000	 4.671156
249	 13	 13	 1	 0.005556	 -1	 0.000000	 8.469294
250	 13	 13	 1	 0.010498	 -1	 0.000000	 6.801549
251	 13	 13	 1	 0.001666	 -1	 0.000000	 12.833881
252	 13	 13	 1	 0.006708	 -1	 0.000000	 8.222235
253	 13	 13	 1	 0.005817	 -1	 0.000000	 5.319721
254	 13	 13	 1	 0.001790	 -1	 0.000000	 3.684445
255	 13	 13	 1	 0.002676	 -1	 0.000000	 7.888861
256	 13	 13	 1	 0.006413	 -1	 0.000000	 6.856504
257	 13	 13	 1	 0.002506	 -1	 0.000000	 6.746926
258	 13	 13	 1	 0.002871	 -1	 0.000000	 10.738354
259	 13	 13	 1	 0.003830	 -1	 0.000000	 14.707632
260	 13	 13	 1	 0.004014	 -1	 0.000000	 5.355841
261	 13	 13	 1	 0.008030	 -1	 0.000000	 6.146574
262	 13	 13	 1	 0.219224	 -1	 0.000000	 5.096241
263	 13	 13	 1	 0.006401	 -1	 0.000000	 11.162712
264	 13	 13	 1	 0.000170	 -1	 0.000000	 7.893420
265	 13	 13	 1	 0.123439	 -1	 0.000000	 4.654914
266	 13	 13	 1	 0.013041	 -1	 0.000000	 6.860148
267	 13	 13	 1	 0.057795	 -1	 0.000000	 6.490757
268	 13	 13	 1	 0.003479	 -1	 0.000000	 8.037936
269	 13	 13	 1	 0.002602	 -1	 0.000000	 10.013920
270	 13	 13	 1	 0.013105	 -1	 0.000000	 6.344374
271	 13	 13	 1	 0.008564	 -1	 0.000000	 8.827516
272	 13	 13	 1	 0.007149	 -1	 0.000000	 6.586195
273	 13	 13	 1	 0.005940	 -1	 0.000000	 8.714240
274	 13	 13	 1	 0.001323	 -1	 0.000000	 8.543171
275	 13	 13	 1	 0.004051	 -1	 0.000000	 4.332767
276	 13	 13	 1	 0.004429	 -1	 0.000000	 10.078351
277	 13	 13	 1	 0.010351	 -1	 0.000000	 5.807951
278	 13	 13	 1	 0.016610	 -1	 0.000000	 5.782450
279	 13	 13	 1	 0.001655	 -1	 0.000000	 6.793556
280	 13	 13	 1	 0.002357	 -1	 0.000000	 4.530893
281	 13	 13	 1	 0.001173	 -1	 0.000000	 6.041595
282	 13	 13	 1	 0.002697	 -1	 0.000000	 5.846737
283	 13	 13	 1	 0.006687	 -1	 0.000000	 9.811835
284	 13	 13	 1	 0.001418	 -1	 0.000000	 5.713584
285	 13	 13	 1	 0.006681	 -1	 0.000000	 7.433641
286	 13	 13	 1	 0.004638	 -1	 0.000000	 6.126244
287	 13	 13	 1	 0.015259	 -1	 0.000000	 4.898652
288	 13	 13	 1	 0.123874	 -1	 0.000000	 5.651262
289	 13	 13	 1	 0.001376	 -1	 0.000000	 12.859141
290	 13	 13	 1	 0.001661	 -1	 0.000000	 6.145366
291	 13	 13	 1	 0.000763	 -1	 0.000000	 5.873505
292	 13	 13	 1	 0.052117	 -1	 0.000000	 9.406012
293	 13	 13	 1	 0.000254	 -1	 0.000000	 7.591570
294	 13	 13	 1	 0.003276	 -1	 0.000000	 5.584053
295	 13	 13	 1	 0.038466	 -1	 0.000000	 6.722001
296	 13	 13	 1	 0.233285	 -1	 0.000000	 6.475609
297	 13	 13	 1	 0.007502	 -1	 0.000000	 7.410205
298	 13	 13	 1	 0.005029	 -1	 0.000000	 4.855265
299	 13	 13	 1	 0.017461	 -1	 0.000000	 10.523993
300	 13	 13	 1	 0.020364	 -1	 0.000000	 7.982809
301	 13	 13	 1	 0.088715	 -1	 0.000000	 6.262122
302	 13	 13	 1	 0.023716	 -1	 0.000000	 5.216165
303	 13	 13	 1	 0.031983	 -1	 0.000000	 5.046248
304	 13	 13	 1	 0.001953	 -1	 0.000000	 6.002315
305	 13	 13	 1	 0.001157	 -1	 0.000000	 9.632811
306	 13	 13	 1	 0.000225	 -1	 0.000000	 6.442411
307	 13	 13	 1	 0.005004	 -1	 0.000000	 4.483819
308	 13	 13	 1	 0.000470	 -1	 0.000000	 7.529004
309	 13	 13	 1	 0.006306	 -1	 0.000000	 6.903312
310	 13	 13	 1	 0.011954	 -1	 0.000000	 4.942397
311	 13	 13	 1	 0.010302	 -1	 0.000000	 9.523514
312	 13	 13	 1	 0.000501	 -1	 0.000000	 4.755474
313	 13	 13	 1	 0.006149	 -1	 0.000000	 9.647272
314	 13	 13	 1	 0.002608	 -1	 0.000000	 5.592239
315	 13	 13	 1	 0.001851	 -1	 0.000000	 6.070870
316	 13	 13	 1	 0.053782	 -1	 0.000000	 7.838881
317	 13	 13	 1	 0.019564	 -1	 0.000000	 6.289465
318	 13	 13	 1	 0.003536	 -1	 0.000000	 6.779922
319	 13	 13	 1	 0.002937	 -1	 0.000000	 8.258119
320	 13	 13	 1	 0.002032	 -1	 0.000000	 7.049565
321	 13	 13	 1	 0.002062	 -1	 0.000000	 8.202641
322	 13	 13	 1	 0.000281	 -1	 0.000000	 5.445271
323	 13	 13	 1	 0.002591	 -1	 0.000000	 7.565993
324	 13	 13	 1	 0.034387	 -1	 0.000000	 7.358046
325	 13	 13	 1	 0.019420	 -1	 0.000000	 5.901958
326	 13	 13	 1	 0.002484	 -1	 0.000000	 6.166892
327	 13	 13	 1	 0.000730	 -1	 0.000000	 10.682964
328	 13	 13	 1	 0.006246	 -1	 0.000000	 7.119720
330	 13	 13	 0	 1000.000000	 -1	 0.000000	 4.802722
339	 13	 13	 1	 0.010247	 -1	 0.000000	 8.502367
364	 13	 13	 1	 0.002338	 -1	 0.000000	 7.024991
373	 13	 13	 1	 0.038793	 -1	 0.000000	 4.797540
398	 13	 13	 1	 0.001092	 -1	 0.000000	 6.466311
424	 13	 13	 0	 140.756859	 -1	 0.000000	 7.461060
425	 13	 13	 1	 0.003767	 -1	 0.000000	 6.746711
427	 13	 13	 1	 0.046881	 -1	 0.000000	 6.140302
444	 13	 13	 1	 0.000869	 -1	 0.000000	 5.763040
450	 13	 13	 1	 0.008279	 -1	 0.000000	 5.811867
451	 13	 13	 1	 0.006095	 -1	 0.000000	 7.005201
452	 13	 13	 1	 0.001309	 -1	 0.000000	 10.039153
466	 13	 13	 0	 160.330049	 -1	 0.000000	 10.264228
473	 13	 13	 1	 0.001813	 -1	 0.000000	 5.866290
474	 13	 13	 1	 0.061296	 -1	 0.000000	 5.371835
475	 13	 13	 1	 0.004428	 -1	 0.000000	 4.578592
476	 13	 13	 0	 1000.000000	 -1	 0.000000	 11.880355
495	 13	 13	 1	 0.004720	 -1	 0.000000	 4.419006
496	 13	 13	 1	 0.044331	 -1	 0.000000	 4.737288
497	 13	 13	 1	 0.001355	 -1	 0.000000	 5.427776
498	 13	 13	 1	 0.101370	 -1	 0.000000	 6.207032
0	 15	 15	 1	 0.050046	 -1	 0.000000	 5.750277
1	 15	 15	 1	 0.835889	 -1	 0.000000	 9.219513
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   19 items of size 3312. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   19 items of size 3312. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 5	 5	 1	 8.660503	 -1	 0.000000	 6.508830
1	 5	 5	 1	 5.411838	 -1	 0.000000	 8.608339
2	 5	 5	 1	 11.871976	 -1	 0.000000	 5.748580
3	 5	 5	 1	 4.942514	 -1	 0.000000	 6.708824
4	 5	 5	 1	 13.935416	 -1	 0.000000	 3.826224
5	 5	 5	 1	 21.342582	 -1	 0.000000	 7.145232
6	 5	 5	 1	 10.000628	 -1	 0.000000	 6.084711
7	 5	 5	 1	 11.047682	 -1	 0.000000	 5.221245
8	 5	 5	 1	 3.460575	 -1	 0.000000	 8.770828
9	 5	 5	 1	 5.530407	 -1	 0.000000	 14.279164
10	 5	 5	 1	 5.616466	 -1	 0.000000	 7.806169
11	 5	 5	 1	 9.460362	 -1	 0.000000	 7.255066
12	 5	 5	 1	 8.679172	 -1	 0.000000	 9.005007
13	 5	 5	 1	 7.841650	 -1	 0.000000	 6.892715
14	 5	 5	 1	 3.828194	 -1	 0.000000	 5.027550
15	 5	 5	 1	 4.919647	 -1	 0.000000	 4.148961
16	 5	 5	 1	 4.707505	 -1	 0.000000	 7.577340
17	 5	 5	 1	 10.124044	 -1	 0.000000	 5.867617
18	 5	 5	 1	 5.305561	 -1	 0.000000	 8.206729
19	 5	 5	 1	 5.215436	 -1	 0.000000	 6.716597
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   19 items of size 3312. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 9	 9	 0	 422.637747	 -1	 0.000000	 6.787295
1	 9	 9	 0	 331.706555	 -1	 0.000000	 10.005270
2	 9	 9	 0	 424.374063	 -1	 0.000000	 5.135112
3	 9	 9	 0	 368.424992	 -1	 0.000000	 10.151012
4	 9	 9	 0	 401.754148	 -1	 0.000000	 9.640117
5	 9	 9	 0	 381.280203	 -1	 0.000000	 8.224759
6	 9	 9	 0	 354.265807	 -1	 0.000000	 3.949690
7	 9	 9	 0	 409.198580	 -1	 0.000000	 5.438982
8	 9	 9	 0	 426.005121	 -1	 0.000000	 6.172297
9	 9	 9	 0	 331.886174	 -1	 0.000000	 10.371751
10	 9	 9	 0	 371.035634	 -1	 0.000000	 4.216807
11	 9	 9	 0	 350.327480	 -1	 0.000000	 5.344959
12	 9	 9	 0	 406.789447	 -1	 0.000000	 5.142390
13	 9	 9	 0	 393.795009	 -1	 0.000000	 4.306216
14	 9	 9	 0	 407.766702	 -1	 0.000000	 7.010032
15	 9	 9	 0	 345.507111	 -1	 0.000000	 9.710850
16	 9	 9	 0	 404.405039	 -1	 0.000000	 8.235921
17	 9	 9	 0	 352.633330	 -1	 0.000000	 5.212343
18	 9	 9	 0	 333.705669	 -1	 0.000000	 9.749630
19	 9	 9	 0	 430.298725	 -1	 0.000000	 5.428347
20	 9	 9	 0	 382.159774	 -1	 0.000000	 9.137837
21	 9	 9	 0	 330.138997	 -1	 0.000000	 7.174960
22	 9	 9	 0	 331.547188	 -1	 0.000000	 4.982512
23	 9	 9	 0	 399.970066	 -1	 0.000000	 4.376298
24	 9	 9	 0	 417.592110	 -1	 0.000000	 10.212922
25	 9	 9	 0	 379.352129	 -1	 0.000000	 7.940024
26	 9	 9	 0	 381.218829	 -1	 0.000000	 5.161840
27	 9	 9	 0	 416.403246	 -1	 0.000000	 6.114840
28	 9	 9	 0	 375.449024	 -1	 0.000000	 8.118965
29	 9	 9	 0	 388.793102	 -1	 0.000000	 7.763803
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   19 items of size 3312. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
254	 9	 9	 0	 380.798363	 -1	 0.000000	 8.755362
255	 9	 9	 0	 354.158009	 -1	 0.000000	 5.187758
256	 9	 9	 0	 395.244375	 -1	 0.000000	 5.149000
257	 9	 9	 0	 417.163856	 -1	 0.000000	 4.831295
258	 9	 9	 0	 377.811668	 -1	 0.000000	 7.436642
259	 9	 9	 0	 411.446196	 -1	 0.000000	 6.381010
260	 9	 9	 0	 373.905430	 -1	 0.000000	 3.015176
261	 9	 9	 0	 327.715557	 -1	 0.000000	 4.889243
262	 9	 9	 0	 327.279831	 -1	 0.000000	 5.903655
263	 9	 9	 0	 360.208367	 -1	 0.000000	 4.557699
264	 9	 9	 0	 333.727802	 -1	 0.000000	 9.425488
265	 9	 9	 0	 348.553661	 -1	 0.000000	 4.614457
266	 9	 9	 0	 358.382080	 -1	 0.000000	 5.832882
267	 9	 9	 0	 437.373379	 -1	 0.000000	 4.706688
268	 9	 9	 0	 389.752544	 -1	 0.000000	 5.489943
269	 9	 9	 0	 372.038147	 -1	 0.000000	 9.543548
270	 9	 9	 0	 322.972095	 -1	 0.000000	 12.347070
271	 9	 9	 0	 344.308402	 -1	 0.000000	 5.421736
272	 9	 9	 0	 385.071818	 -1	 0.000000	 4.297386
273	 9	 9	 0	 397.218433	 -1	 0.000000	 4.770602
274	 9	 9	 0	 366.159804	 -1	 0.000000	 4.294285
275	 9	 9	 0	 436.296786	 -1	 0.000000	 6.394267
276	 9	 9	 0	 381.741857	 -1	 0.000000	 6.286356
277	 9	 9	 0	 345.361791	 -1	 0.000000	 4.376551
278	 9	 9	 0	 326.278195	 -1	 0.000000	 8.687917
279	 9	 9	 0	 370.177848	 -1	 0.000000	 3.511946
280	 9	 9	 0	 324.238500	 -1	 0.000000	 8.071534
281	 9	 9	 0	 358.766530	 -1	 0.000000	 5.647769
282	 9	 9	 0	 321.231164	 -1	 0.000000	 5.520617
283	 9	 9	 0	 358.879265	 -1	 0.000000	 9.101144
284	 9	 9	 0	 402.398118	 -1	 0.000000	 5.543245
285	 9	 9	 0	 370.644580	 -1	 0.000000	 4.762123
286	 9	 9	 0	 425.770522	 -1	 0.000000	 6.929430
287	 9	 9	 0	 386.538183	 -1	 0.000000	 9.299439
288	 9	 9	 0	 388.689302	 -1	 0.000000	 8.024480
289	 9	 9	 0	 346.209790	 -1	 0.000000	 8.879407
290	 9	 9	 0	 423.239388	 -1	 0.000000	 4.546616
291	 9	 9	 0	 415.056775	 -1	 0.000000	 5.763150
292	 9	 9	 0	 424.429611	 -1	 0.000000	 3.877878
293	 9	 9	 0	 397.079939	 -1	 0.000000	 10.911100
294	 9	 9	 0	 403.787352	 -1	 0.000000	 5.891517
295	 9	 9	 0	 333.328682	 -1	 0.000000	 8.466262
296	 9	 9	 0	 335.665595	 -1	 0.000000	 8.626812
297	 9	 9	 0	 412.817344	 -1	 0.000000	 6.856452
298	 9	 9	 0	 395.943611	 -1	 0.000000	 5.808026
299	 9	 9	 0	 336.460138	 -1	 0.000000	 5.050295
300	 9	 9	 0	 407.256269	 -1	 0.000000	 5.376902
301	 9	 9	 0	 379.939512	 -1	 0.000000	 5.740963
302	 9	 9	 0	 329.724992	 -1	 0.000000	 6.660845
303	 9	 9	 0	 352.509373	 -1	 0.000000	 5.796146
304	 9	 9	 0	 360.834285	 -1	 0.000000	 6.397642
305	 9	 9	 0	 366.063526	 -1	 0.000000	 8.521575
306	 9	 9	 0	 390.629254	 -1	 0.000000	 16.666876
307	 9	 9	 0	 376.466160	 -1	 0.000000	 4.359628
308	 9	 9	 0	 464.575648	 -1	 0.000000	 5.926411
309	 9	 9	 0	 343.099431	 -1	 0.000000	 6.361742
310	 9	 9	 0	 310.700889	 -1	 0.000000	 5.657336
311	 9	 9	 0	 362.808831	 -1	 0.000000	 4.755560
312	 9	 9	 0	 370.862770	 -1	 0.000000	 10.058743
313	 9	 9	 0	 340.086854	 -1	 0.000000	 6.873787
314	 9	 9	 0	 411.987525	 -1	 0.000000	 11.381868
315	 9	 9	 0	 391.875564	 -1	 0.000000	 4.452316
316	 9	 9	 0	 448.090657	 -1	 0.000000	 4.117180
317	 9	 9	 0	 258.339600	 -1	 0.000000	 9.812507
318	 9	 9	 0	 421.054847	 -1	 0.000000	 5.551067
319	 9	 9	 0	 375.759755	 -1	 0.000000	 7.424530
320	 9	 9	 1	 283.662208	 -1	 0.000000	 7.937716
321	 9	 9	 0	 396.718863	 -1	 0.000000	 5.894354
322	 9	 9	 0	 390.845978	 -1	 0.000000	 6.792208
323	 9	 9	 0	 347.690354	 -1	 0.000000	 5.568029
324	 9	 9	 0	 385.680438	 -1	 0.000000	 3.790737
325	 9	 9	 0	 373.434742	 -1	 0.000000	 5.395174
326	 9	 9	 0	 374.143764	 -1	 0.000000	 12.053757
327	 9	 9	 0	 343.839484	 -1	 0.000000	 7.590217
328	 9	 9	 0	 343.743672	 -1	 0.000000	 12.775297
329	 9	 9	 0	 378.311972	 -1	 0.000000	 6.513887
330	 9	 9	 0	 336.840493	 -1	 0.000000	 11.916800
331	 9	 9	 0	 400.726011	 -1	 0.000000	 6.923215
332	 9	 9	 0	 412.718947	 -1	 0.000000	 8.283552
333	 9	 9	 0	 400.768602	 -1	 0.000000	 14.367906
334	 9	 9	 0	 429.487872	 -1	 0.000000	 11.623342
335	 9	 9	 0	 356.040701	 -1	 0.000000	 6.755134
336	 9	 9	 0	 357.841904	 -1	 0.000000	 6.548137
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   19 items of size 3312. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   19 items of size 3312. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   19 items of size 3312. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 10	 10	 0	 475.000863	 -1	 0.000000	 8.391430
1	 10	 10	 0	 472.220093	 -1	 0.000000	 5.200698
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   19 items of size 3312. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
