>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 15	 15	 1	 0.003580	 -1	 0.000000	 10.788138
1	 15	 15	 1	 0.003681	 -1	 0.000000	 8.004305
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 5	 5	 1	 8.416077	 -1	 0.000000	 7.222749
1	 5	 5	 1	 6.412884	 -1	 0.000000	 7.590481
2	 5	 5	 1	 2.609822	 -1	 0.000000	 9.279376
3	 5	 5	 1	 3.839015	 -1	 0.000000	 6.025074
4	 5	 5	 1	 7.559128	 -1	 0.000000	 3.205011
5	 5	 5	 1	 3.541212	 -1	 0.000000	 5.995458
6	 5	 5	 1	 3.196001	 -1	 0.000000	 6.205227
7	 5	 5	 1	 5.990458	 -1	 0.000000	 8.647947
8	 5	 5	 1	 2.860294	 -1	 0.000000	 7.835427
9	 5	 5	 1	 1.807651	 -1	 0.000000	 8.666576
10	 5	 5	 1	 6.359335	 -1	 0.000000	 8.269388
11	 5	 5	 1	 5.033477	 -1	 0.000000	 6.083601
12	 5	 5	 1	 2.205138	 -1	 0.000000	 4.410951
13	 5	 5	 1	 1.620865	 -1	 0.000000	 7.360216
14	 5	 5	 1	 1.114835	 -1	 0.000000	 4.673253
15	 5	 5	 1	 6.637103	 -1	 0.000000	 5.158334
16	 5	 5	 1	 2.886810	 -1	 0.000000	 7.335917
17	 5	 5	 1	 4.097062	 -1	 0.000000	 4.249079
18	 5	 5	 1	 0.990276	 -1	 0.000000	 8.794801
19	 5	 5	 1	 9.606870	 -1	 0.000000	 5.318344
20	 5	 5	 1	 5.032223	 -1	 0.000000	 11.233047
21	 5	 5	 1	 4.501332	 -1	 0.000000	 6.190304
22	 5	 5	 1	 0.921030	 -1	 0.000000	 5.839200
23	 5	 5	 1	 1.787927	 -1	 0.000000	 17.013880
24	 5	 5	 1	 1.307635	 -1	 0.000000	 7.685296
25	 5	 5	 1	 10.314311	 -1	 0.000000	 6.535116
26	 5	 5	 1	 10.013045	 -1	 0.000000	 6.363150
27	 5	 5	 1	 4.860403	 -1	 0.000000	 5.396350
28	 5	 5	 1	 5.198725	 -1	 0.000000	 6.381220
29	 5	 5	 1	 0.707155	 -1	 0.000000	 5.519043
30	 5	 5	 1	 7.520100	 -1	 0.000000	 8.888595
31	 5	 5	 1	 2.198794	 -1	 0.000000	 12.153677
32	 5	 5	 1	 3.826010	 -1	 0.000000	 5.011359
33	 5	 5	 1	 1.928425	 -1	 0.000000	 6.895817
34	 5	 5	 1	 1.631838	 -1	 0.000000	 5.131551
35	 5	 5	 1	 3.057907	 -1	 0.000000	 7.065761
36	 5	 5	 1	 8.696235	 -1	 0.000000	 13.153360
37	 5	 5	 1	 1.212787	 -1	 0.000000	 6.244603
38	 5	 5	 1	 11.266419	 -1	 0.000000	 6.678911
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 5	 5	 1	 7.255402	 -1	 0.000000	 7.167569
1	 5	 5	 1	 1.719234	 -1	 0.000000	 5.161890
2	 5	 5	 1	 2.537757	 -1	 0.000000	 4.330842
3	 5	 5	 1	 3.694710	 -1	 0.000000	 5.149480
4	 5	 5	 1	 8.216441	 -1	 0.000000	 6.820127
5	 5	 5	 1	 2.363375	 -1	 0.000000	 8.145592
6	 5	 5	 1	 2.910822	 -1	 0.000000	 6.446056
7	 5	 5	 1	 5.008801	 -1	 0.000000	 3.070179
8	 5	 5	 1	 5.733796	 -1	 0.000000	 4.939034
9	 5	 5	 1	 2.065227	 -1	 0.000000	 8.465612
10	 5	 5	 1	 6.725374	 -1	 0.000000	 4.471004
11	 5	 5	 1	 9.103046	 -1	 0.000000	 9.326878
12	 5	 5	 1	 3.339912	 -1	 0.000000	 4.356554
13	 5	 5	 1	 2.250174	 -1	 0.000000	 13.364063
14	 5	 5	 1	 5.053109	 -1	 0.000000	 6.237894
15	 5	 5	 1	 6.631064	 -1	 0.000000	 9.795022
16	 5	 5	 1	 7.492728	 -1	 0.000000	 5.369727
17	 5	 5	 1	 6.231730	 -1	 0.000000	 5.057423
18	 5	 5	 1	 4.320930	 -1	 0.000000	 6.583377
19	 5	 5	 1	 2.602516	 -1	 0.000000	 5.686492
20	 5	 5	 1	 1.494519	 -1	 0.000000	 19.716455
21	 5	 5	 1	 12.100099	 -1	 0.000000	 5.350477
22	 5	 5	 1	 6.688300	 -1	 0.000000	 7.952440
23	 5	 5	 1	 3.881143	 -1	 0.000000	 7.189853
24	 5	 5	 1	 4.584303	 -1	 0.000000	 4.823806
25	 5	 5	 1	 3.144132	 -1	 0.000000	 8.469375
26	 5	 5	 1	 2.182371	 -1	 0.000000	 6.670722
27	 5	 5	 1	 4.900270	 -1	 0.000000	 8.974852
28	 5	 5	 1	 6.179159	 -1	 0.000000	 5.565564
29	 5	 5	 1	 2.293921	 -1	 0.000000	 8.044212
30	 5	 5	 1	 3.659103	 -1	 0.000000	 11.182777
31	 5	 5	 1	 3.519656	 -1	 0.000000	 8.688319
32	 5	 5	 1	 0.226807	 -1	 0.000000	 8.845141
33	 5	 5	 1	 1.781917	 -1	 0.000000	 4.477757
34	 5	 5	 1	 2.672439	 -1	 0.000000	 5.630252
35	 5	 5	 1	 10.505165	 -1	 0.000000	 7.867009
36	 5	 5	 1	 5.725842	 -1	 0.000000	 8.453054
37	 5	 5	 1	 10.710192	 -1	 0.000000	 4.141606
38	 5	 5	 1	 7.146554	 -1	 0.000000	 5.168512
39	 5	 5	 1	 2.577482	 -1	 0.000000	 5.911709
40	 5	 5	 1	 1.376460	 -1	 0.000000	 5.409157
41	 5	 5	 1	 3.347669	 -1	 0.000000	 9.084785
42	 5	 5	 1	 4.520789	 -1	 0.000000	 6.782922
43	 5	 5	 1	 1.470856	 -1	 0.000000	 4.442201
44	 5	 5	 1	 3.809947	 -1	 0.000000	 6.690531
45	 5	 5	 1	 8.783819	 -1	 0.000000	 6.659829
46	 5	 5	 1	 4.116756	 -1	 0.000000	 5.496046
47	 5	 5	 1	 7.001777	 -1	 0.000000	 7.928668
48	 5	 5	 1	 0.672645	 -1	 0.000000	 8.515620
49	 5	 5	 1	 0.747890	 -1	 0.000000	 4.503281
50	 5	 5	 1	 1.315769	 -1	 0.000000	 6.159060
51	 5	 5	 1	 1.511164	 -1	 0.000000	 9.820140
52	 5	 5	 1	 1.544195	 -1	 0.000000	 9.446599
53	 5	 5	 1	 3.740529	 -1	 0.000000	 6.551404
54	 5	 5	 1	 2.547948	 -1	 0.000000	 4.021913
55	 5	 5	 1	 2.807097	 -1	 0.000000	 7.844245
56	 5	 5	 1	 5.787066	 -1	 0.000000	 8.707948
57	 5	 5	 1	 1.602981	 -1	 0.000000	 3.536198
58	 5	 5	 1	 5.349100	 -1	 0.000000	 4.183977
59	 5	 5	 1	 2.311342	 -1	 0.000000	 5.702958
60	 5	 5	 1	 0.493730	 -1	 0.000000	 6.382361
61	 5	 5	 1	 4.625458	 -1	 0.000000	 10.614080
62	 5	 5	 1	 3.548625	 -1	 0.000000	 9.049756
63	 5	 5	 1	 4.985495	 -1	 0.000000	 8.856939
64	 5	 5	 1	 0.533161	 -1	 0.000000	 5.763272
65	 5	 5	 1	 10.869397	 -1	 0.000000	 8.893314
66	 5	 5	 1	 2.834291	 -1	 0.000000	 5.326642
67	 5	 5	 1	 2.684487	 -1	 0.000000	 5.809642
68	 5	 5	 1	 2.165716	 -1	 0.000000	 9.982326
69	 5	 5	 1	 4.865959	 -1	 0.000000	 8.372519
70	 5	 5	 1	 0.870381	 -1	 0.000000	 12.337820
71	 5	 5	 1	 2.388974	 -1	 0.000000	 5.909909
72	 5	 5	 1	 3.539773	 -1	 0.000000	 6.391420
73	 5	 5	 1	 3.847256	 -1	 0.000000	 5.597824
74	 5	 5	 1	 7.564730	 -1	 0.000000	 5.555334
75	 5	 5	 1	 4.968064	 -1	 0.000000	 8.822866
76	 5	 5	 1	 6.207949	 -1	 0.000000	 3.726511
77	 5	 5	 1	 2.786115	 -1	 0.000000	 6.703184
78	 5	 5	 1	 2.198493	 -1	 0.000000	 5.776539
79	 5	 5	 1	 1.334361	 -1	 0.000000	 6.324340
80	 5	 5	 1	 1.578797	 -1	 0.000000	 4.638725
81	 5	 5	 1	 1.091573	 -1	 0.000000	 6.706425
82	 5	 5	 1	 3.716769	 -1	 0.000000	 5.423266
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 7	 7	 1	 21.767390	 -1	 0.000000	 5.333538
1	 7	 7	 1	 22.908465	 -1	 0.000000	 9.180960
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 7	 7	 1	 18.390620	 -1	 0.000000	 6.209645
1	 7	 7	 1	 6.975960	 -1	 0.000000	 6.828094
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 11	 11	 0	 404.213733	 -1	 0.000000	 6.067034
1	 11	 11	 0	 330.795572	 -1	 0.000000	 6.047649
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 11	 11	 0	 363.979902	 -1	 0.000000	 5.832581
1	 11	 11	 0	 299.604663	 -1	 0.000000	 9.124571
2	 11	 11	 0	 345.554028	 -1	 0.000000	 10.309572
3	 11	 11	 0	 366.679628	 -1	 0.000000	 6.239932
4	 11	 11	 0	 337.030661	 -1	 0.000000	 4.254426
5	 11	 11	 0	 327.737743	 -1	 0.000000	 7.647602
6	 11	 11	 0	 423.488806	 -1	 0.000000	 4.122743
7	 11	 11	 0	 392.957496	 -1	 0.000000	 13.111311
8	 11	 11	 0	 386.889865	 -1	 0.000000	 5.681576
9	 11	 11	 0	 380.605258	 -1	 0.000000	 7.222970
10	 11	 11	 0	 315.496056	 -1	 0.000000	 6.772188
11	 11	 11	 0	 285.745919	 -1	 0.000000	 7.278019
12	 11	 11	 0	 416.666301	 -1	 0.000000	 5.593271
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 10	 10	 0	 481.109361	 -1	 0.000000	 7.431894
1	 10	 10	 0	 468.314852	 -1	 0.000000	 6.511990
2	 10	 10	 0	 468.879273	 -1	 0.000000	 8.290851
3	 10	 10	 0	 469.094004	 -1	 0.000000	 6.392323
4	 10	 10	 0	 470.361368	 -1	 0.000000	 5.489796
5	 10	 10	 0	 469.522843	 -1	 0.000000	 8.440628
6	 10	 10	 0	 476.250957	 -1	 0.000000	 5.462928
7	 10	 10	 0	 476.829542	 -1	 0.000000	 5.594375
8	 10	 10	 0	 472.253383	 -1	 0.000000	 7.167356
9	 10	 10	 0	 471.963256	 -1	 0.000000	 15.196694
10	 10	 10	 0	 471.660784	 -1	 0.000000	 9.274787
11	 10	 10	 0	 463.513655	 -1	 0.000000	 6.524877
12	 10	 10	 0	 474.311503	 -1	 0.000000	 10.251133
13	 10	 10	 0	 480.268965	 -1	 0.000000	 5.616137
14	 10	 10	 0	 481.872667	 -1	 0.000000	 4.821640
15	 10	 10	 0	 472.344940	 -1	 0.000000	 7.427673
16	 10	 10	 0	 477.161076	 -1	 0.000000	 4.638849
17	 10	 10	 0	 469.506168	 -1	 0.000000	 4.981668
18	 10	 10	 0	 468.857956	 -1	 0.000000	 17.649817
19	 10	 10	 0	 476.714462	 -1	 0.000000	 5.359929
20	 10	 10	 0	 462.403355	 -1	 0.000000	 21.527243
21	 10	 10	 0	 478.639563	 -1	 0.000000	 5.616014
22	 10	 10	 0	 477.923200	 -1	 0.000000	 7.117088
23	 10	 10	 0	 480.881640	 -1	 0.000000	 6.323781
24	 10	 10	 0	 461.862606	 -1	 0.000000	 6.623365
25	 10	 10	 0	 482.083566	 -1	 0.000000	 7.057679
26	 10	 10	 0	 471.127718	 -1	 0.000000	 8.586475
27	 10	 10	 0	 477.633237	 -1	 0.000000	 7.962233
28	 10	 10	 0	 473.868935	 -1	 0.000000	 5.772808
29	 10	 10	 0	 474.684060	 -1	 0.000000	 10.013412
30	 10	 10	 0	 480.380462	 -1	 0.000000	 8.411157
31	 10	 10	 0	 471.805211	 -1	 0.000000	 16.338095
32	 10	 10	 0	 478.903676	 -1	 0.000000	 7.090600
33	 10	 10	 0	 474.752759	 -1	 0.000000	 6.158198
34	 10	 10	 0	 470.082643	 -1	 0.000000	 10.254133
35	 10	 10	 0	 479.828247	 -1	 0.000000	 10.283276
36	 10	 10	 0	 472.580762	 -1	 0.000000	 7.098781
37	 10	 10	 0	 472.738498	 -1	 0.000000	 4.964333
38	 10	 10	 0	 468.883116	 -1	 0.000000	 5.567502
39	 10	 10	 0	 477.189953	 -1	 0.000000	 6.633986
40	 10	 10	 0	 474.835429	 -1	 0.000000	 5.465266
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 10	 10	 0	 469.217953	 -1	 0.000000	 6.882015
1	 10	 10	 0	 471.461396	 -1	 0.000000	 7.941241
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   30 items of size 2160. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
