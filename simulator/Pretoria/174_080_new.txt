>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 13	 13	 1	 0.017814	 -1	 0.000000	 7.109576
1	 13	 13	 1	 0.001783	 -1	 0.000000	 5.144814
2	 13	 13	 1	 0.006241	 -1	 0.000000	 8.104384
3	 13	 13	 1	 0.000511	 -1	 0.000000	 6.939638
4	 13	 13	 1	 0.001357	 -1	 0.000000	 7.070515
5	 13	 13	 1	 0.001707	 -1	 0.000000	 3.951847
6	 13	 13	 1	 0.000908	 -1	 0.000000	 3.758356
7	 13	 13	 1	 0.001431	 -1	 0.000000	 2.519984
8	 13	 13	 1	 0.002325	 -1	 0.000000	 3.668937
9	 13	 13	 1	 0.000190	 -1	 0.000000	 5.806322
10	 13	 13	 1	 0.000332	 -1	 0.000000	 2.970414
11	 13	 13	 1	 0.014308	 -1	 0.000000	 6.119459
12	 13	 13	 1	 0.000459	 -1	 0.000000	 16.440737
13	 13	 13	 1	 0.007180	 -1	 0.000000	 4.894536
14	 13	 13	 1	 0.020421	 -1	 0.000000	 4.571733
15	 13	 13	 1	 0.004705	 -1	 0.000000	 4.628553
16	 13	 13	 1	 0.000874	 -1	 0.000000	 4.604881
17	 13	 13	 1	 0.003046	 -1	 0.000000	 12.853953
18	 13	 13	 1	 0.000479	 -1	 0.000000	 8.559542
19	 13	 13	 1	 0.001215	 -1	 0.000000	 6.262923
20	 13	 13	 1	 0.001067	 -1	 0.000000	 8.328903
21	 13	 13	 1	 0.045713	 -1	 0.000000	 6.368556
22	 13	 13	 1	 0.000303	 -1	 0.000000	 5.139786
23	 13	 13	 1	 0.002339	 -1	 0.000000	 3.649161
24	 13	 13	 1	 0.000330	 -1	 0.000000	 5.940490
25	 13	 13	 1	 0.008377	 -1	 0.000000	 5.361808
26	 13	 13	 1	 0.003555	 -1	 0.000000	 4.975537
27	 13	 13	 1	 0.002545	 -1	 0.000000	 4.404387
28	 13	 13	 1	 0.002157	 -1	 0.000000	 4.281283
29	 13	 13	 1	 0.000439	 -1	 0.000000	 6.922688
30	 13	 13	 1	 0.002252	 -1	 0.000000	 4.865078
31	 13	 13	 1	 0.009681	 -1	 0.000000	 4.582448
32	 13	 13	 1	 0.011736	 -1	 0.000000	 2.912098
33	 13	 13	 1	 0.001538	 -1	 0.000000	 3.842559
34	 13	 13	 1	 0.005522	 -1	 0.000000	 7.091158
35	 13	 13	 1	 0.000574	 -1	 0.000000	 4.926316
36	 13	 13	 1	 0.012570	 -1	 0.000000	 6.166690
37	 13	 13	 1	 0.002633	 -1	 0.000000	 4.871668
38	 13	 13	 1	 0.001064	 -1	 0.000000	 5.034014
39	 13	 13	 1	 0.001819	 -1	 0.000000	 2.261167
40	 13	 13	 1	 0.000432	 -1	 0.000000	 7.992799
41	 13	 13	 1	 0.003739	 -1	 0.000000	 2.983491
42	 13	 13	 1	 0.001347	 -1	 0.000000	 6.929049
43	 13	 13	 1	 0.005195	 -1	 0.000000	 3.203817
44	 13	 13	 1	 0.001207	 -1	 0.000000	 4.295810
45	 13	 13	 1	 0.000357	 -1	 0.000000	 3.712178
46	 13	 13	 1	 0.000418	 -1	 0.000000	 3.944064
47	 13	 13	 1	 0.002298	 -1	 0.000000	 3.580678
48	 13	 13	 1	 0.005582	 -1	 0.000000	 4.849957
49	 13	 13	 1	 0.000236	 -1	 0.000000	 10.389553
50	 13	 13	 1	 0.002451	 -1	 0.000000	 14.328013
51	 13	 13	 1	 0.000457	 -1	 0.000000	 3.204577
52	 13	 13	 1	 0.005636	 -1	 0.000000	 3.256158
53	 13	 13	 1	 0.003949	 -1	 0.000000	 4.389335
54	 13	 13	 1	 0.012972	 -1	 0.000000	 5.310534
55	 13	 13	 1	 0.005265	 -1	 0.000000	 6.453536
56	 13	 13	 1	 0.007105	 -1	 0.000000	 4.420385
57	 13	 13	 1	 0.000655	 -1	 0.000000	 3.932441
58	 13	 13	 1	 0.001108	 -1	 0.000000	 4.026103
59	 13	 13	 1	 0.000153	 -1	 0.000000	 5.477926
60	 13	 13	 1	 0.004802	 -1	 0.000000	 4.198722
61	 13	 13	 1	 0.000846	 -1	 0.000000	 7.439526
62	 13	 13	 1	 0.102408	 -1	 0.000000	 4.029093
63	 13	 13	 1	 0.001121	 -1	 0.000000	 4.015193
64	 13	 13	 1	 0.001295	 -1	 0.000000	 7.043613
65	 13	 13	 1	 0.001586	 -1	 0.000000	 5.961223
66	 13	 13	 1	 0.000166	 -1	 0.000000	 8.905195
67	 13	 13	 1	 0.000388	 -1	 0.000000	 6.800141
68	 13	 13	 1	 0.004132	 -1	 0.000000	 7.076625
69	 13	 13	 1	 0.010105	 -1	 0.000000	 8.098950
70	 13	 13	 1	 0.001388	 -1	 0.000000	 5.929181
71	 13	 13	 1	 0.000159	 -1	 0.000000	 7.186882
72	 13	 13	 1	 0.020706	 -1	 0.000000	 6.912879
73	 13	 13	 1	 0.002467	 -1	 0.000000	 4.852964
74	 13	 13	 1	 0.009602	 -1	 0.000000	 5.199011
75	 13	 13	 1	 0.003623	 -1	 0.000000	 3.195824
76	 13	 13	 1	 0.001974	 -1	 0.000000	 7.605296
77	 13	 13	 1	 0.004067	 -1	 0.000000	 4.085510
78	 13	 13	 1	 0.000767	 -1	 0.000000	 6.323470
79	 13	 13	 1	 0.009985	 -1	 0.000000	 5.861071
80	 13	 13	 1	 0.003294	 -1	 0.000000	 3.292745
81	 13	 13	 1	 0.004475	 -1	 0.000000	 5.007589
82	 13	 13	 1	 0.000275	 -1	 0.000000	 2.806308
83	 13	 13	 1	 0.002346	 -1	 0.000000	 3.244383
84	 13	 13	 1	 0.003485	 -1	 0.000000	 6.209208
85	 13	 13	 1	 0.001546	 -1	 0.000000	 3.163139
86	 13	 13	 1	 0.002657	 -1	 0.000000	 5.003843
87	 13	 13	 1	 0.003796	 -1	 0.000000	 6.761706
88	 13	 13	 1	 0.001254	 -1	 0.000000	 8.066137
89	 13	 13	 1	 0.001378	 -1	 0.000000	 4.031971
90	 13	 13	 1	 0.030103	 -1	 0.000000	 4.693395
91	 13	 13	 1	 0.003308	 -1	 0.000000	 3.137797
92	 13	 13	 1	 0.001654	 -1	 0.000000	 7.449353
93	 13	 13	 1	 0.000172	 -1	 0.000000	 6.341797
94	 13	 13	 1	 0.018769	 -1	 0.000000	 5.608779
95	 13	 13	 1	 0.000705	 -1	 0.000000	 5.431070
96	 13	 13	 1	 0.001582	 -1	 0.000000	 4.993667
97	 13	 13	 1	 0.000715	 -1	 0.000000	 9.969937
98	 13	 13	 1	 0.000882	 -1	 0.000000	 10.936498
99	 13	 13	 1	 0.000164	 -1	 0.000000	 5.157423
100	 13	 13	 1	 0.001515	 -1	 0.000000	 4.499369
101	 13	 13	 1	 0.008334	 -1	 0.000000	 5.986429
102	 13	 13	 1	 0.010204	 -1	 0.000000	 7.799223
103	 13	 13	 1	 0.001915	 -1	 0.000000	 5.984904
104	 13	 13	 1	 0.000596	 -1	 0.000000	 7.011807
105	 13	 13	 1	 0.031812	 -1	 0.000000	 5.104776
106	 13	 13	 1	 0.001942	 -1	 0.000000	 8.576691
107	 13	 13	 1	 0.000280	 -1	 0.000000	 5.362673
108	 13	 13	 1	 0.002951	 -1	 0.000000	 7.842776
109	 13	 13	 1	 0.000695	 -1	 0.000000	 4.115900
122	 13	 13	 1	 0.000262	 -1	 0.000000	 5.343144
198	 13	 13	 1	 0.025289	 -1	 0.000000	 7.136489
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 15	 15	 1	 0.035722	 -1	 0.000000	 4.284609
1	 15	 15	 1	 0.032658	 -1	 0.000000	 4.741118
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 5	 5	 1	 9.485270	 -1	 0.000000	 5.417942
1	 5	 5	 1	 6.606314	 -1	 0.000000	 5.544888
2	 5	 5	 1	 5.826520	 -1	 0.000000	 5.399889
3	 5	 5	 1	 2.605745	 -1	 0.000000	 5.954504
4	 5	 5	 1	 5.413225	 -1	 0.000000	 4.310369
5	 5	 5	 1	 18.416123	 -1	 0.000000	 9.404843
6	 5	 5	 1	 1.682872	 -1	 0.000000	 5.844401
7	 5	 5	 1	 2.172432	 -1	 0.000000	 2.015630
8	 5	 5	 1	 4.796205	 -1	 0.000000	 7.597381
9	 5	 5	 1	 7.555119	 -1	 0.000000	 7.529367
10	 5	 5	 1	 13.010345	 -1	 0.000000	 8.274521
11	 5	 5	 1	 11.104574	 -1	 0.000000	 5.877238
12	 5	 5	 1	 11.559321	 -1	 0.000000	 3.775551
13	 5	 5	 1	 34.294248	 -1	 0.000000	 2.869442
14	 5	 5	 1	 2.811944	 -1	 0.000000	 3.539527
15	 5	 5	 1	 3.349275	 -1	 0.000000	 3.363647
16	 5	 5	 1	 4.338717	 -1	 0.000000	 7.302443
17	 5	 5	 1	 3.894470	 -1	 0.000000	 12.297393
18	 5	 5	 1	 6.836425	 -1	 0.000000	 4.720319
19	 5	 5	 1	 15.187629	 -1	 0.000000	 6.517555
20	 5	 5	 1	 3.688316	 -1	 0.000000	 5.497519
21	 5	 5	 1	 3.771190	 -1	 0.000000	 10.003510
22	 5	 5	 1	 10.955588	 -1	 0.000000	 3.427320
23	 5	 5	 1	 7.399007	 -1	 0.000000	 8.574816
24	 5	 5	 1	 9.659073	 -1	 0.000000	 9.048052
25	 5	 5	 1	 2.647229	 -1	 0.000000	 4.956616
26	 5	 5	 1	 13.296448	 -1	 0.000000	 4.953141
27	 5	 5	 1	 17.069932	 -1	 0.000000	 3.854480
28	 5	 5	 1	 7.211908	 -1	 0.000000	 9.814716
29	 5	 5	 1	 8.079081	 -1	 0.000000	 4.157690
30	 5	 5	 1	 16.929730	 -1	 0.000000	 3.321256
31	 5	 5	 1	 8.411953	 -1	 0.000000	 5.601722
32	 5	 5	 1	 10.171447	 -1	 0.000000	 14.417146
33	 5	 5	 1	 5.669020	 -1	 0.000000	 4.673499
34	 5	 5	 1	 12.377634	 -1	 0.000000	 5.100467
35	 5	 5	 1	 17.494142	 -1	 0.000000	 4.095834
36	 5	 5	 1	 12.602979	 -1	 0.000000	 4.242356
37	 5	 5	 1	 5.147157	 -1	 0.000000	 7.872674
38	 5	 5	 1	 6.489770	 -1	 0.000000	 8.871754
39	 5	 5	 1	 10.309173	 -1	 0.000000	 5.121155
40	 5	 5	 1	 5.370184	 -1	 0.000000	 2.525088
41	 5	 5	 1	 5.345620	 -1	 0.000000	 4.138782
42	 5	 5	 1	 4.757721	 -1	 0.000000	 8.639382
43	 5	 5	 1	 8.863980	 -1	 0.000000	 4.795790
44	 5	 5	 1	 8.995069	 -1	 0.000000	 4.918058
45	 5	 5	 1	 3.375270	 -1	 0.000000	 4.061080
46	 5	 5	 1	 6.648088	 -1	 0.000000	 4.772913
47	 5	 5	 1	 3.776535	 -1	 0.000000	 7.123589
48	 5	 5	 1	 19.742902	 -1	 0.000000	 16.109928
49	 5	 5	 1	 4.243062	 -1	 0.000000	 7.326912
50	 5	 5	 1	 14.010417	 -1	 0.000000	 7.832489
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
1	 7	 7	 1	 44.423692	 -1	 0.000000	 4.871589
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
terminate called after throwing an instance of 'std::invalid_argument'
  what():  gr_ofdm_demod: Incorrect subcarriers allocated
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 9	 9	 0	 260.462243	 -1	 0.000000	 6.096183
1	 9	 9	 0	 398.229025	 -1	 0.000000	 4.349613
2	 9	 9	 0	 393.901119	 -1	 0.000000	 5.538672
3	 9	 9	 0	 448.498212	 -1	 0.000000	 7.528872
4	 9	 9	 0	 197.081234	 -1	 0.000000	 4.930490
5	 9	 9	 1	 179.678835	 -1	 0.000000	 3.411760
6	 9	 9	 0	 351.240988	 -1	 0.000000	 2.548764
7	 9	 9	 1	 188.353802	 -1	 0.000000	 4.926104
8	 9	 9	 1	 220.156508	 -1	 0.000000	 2.642826
9	 9	 9	 1	 206.806716	 -1	 0.000000	 5.232229
10	 9	 9	 0	 390.707973	 -1	 0.000000	 3.620133
11	 9	 9	 0	 318.693920	 -1	 0.000000	 5.367465
12	 9	 9	 0	 341.150631	 -1	 0.000000	 6.332491
13	 9	 9	 0	 362.708652	 -1	 0.000000	 5.422513
14	 9	 9	 1	 190.268460	 -1	 0.000000	 6.469778
15	 9	 9	 1	 223.971503	 -1	 0.000000	 5.363383
16	 9	 9	 0	 367.154422	 -1	 0.000000	 4.306438
17	 9	 9	 1	 242.021487	 -1	 0.000000	 11.155609
18	 9	 9	 0	 376.260106	 -1	 0.000000	 3.561595
19	 9	 9	 1	 225.670424	 -1	 0.000000	 5.348690
20	 9	 9	 1	 197.285966	 -1	 0.000000	 6.082579
21	 9	 9	 0	 392.546954	 -1	 0.000000	 7.183594
22	 9	 9	 1	 213.896896	 -1	 0.000000	 3.973277
23	 9	 9	 0	 330.075724	 -1	 0.000000	 8.340495
24	 9	 9	 0	 422.958565	 -1	 0.000000	 6.291609
25	 9	 9	 1	 179.153303	 -1	 0.000000	 4.134812
26	 9	 9	 1	 244.325662	 -1	 0.000000	 5.899997
27	 9	 9	 0	 426.134154	 -1	 0.000000	 4.107094
28	 9	 9	 0	 382.159655	 -1	 0.000000	 3.981542
29	 9	 9	 1	 174.799540	 -1	 0.000000	 11.418108
30	 9	 9	 1	 228.353126	 -1	 0.000000	 13.342923
31	 9	 9	 0	 387.576065	 -1	 0.000000	 8.739453
32	 9	 9	 0	 401.412470	 -1	 0.000000	 3.792437
33	 9	 9	 1	 185.768214	 -1	 0.000000	 3.023575
34	 9	 9	 1	 201.150963	 -1	 0.000000	 9.316482
35	 9	 9	 1	 231.760984	 -1	 0.000000	 2.576116
36	 9	 9	 1	 221.522738	 -1	 0.000000	 5.525933
37	 9	 9	 1	 203.629787	 -1	 0.000000	 8.872279
38	 9	 9	 0	 327.383352	 -1	 0.000000	 11.475158
39	 9	 9	 0	 379.142629	 -1	 0.000000	 3.033816
40	 9	 9	 1	 263.556579	 -1	 0.000000	 9.083563
41	 9	 9	 1	 221.120779	 -1	 0.000000	 4.087084
42	 9	 9	 1	 200.507644	 -1	 0.000000	 6.112262
43	 9	 9	 0	 239.489109	 -1	 0.000000	 4.676775
44	 9	 9	 0	 406.820665	 -1	 0.000000	 9.182241
45	 9	 9	 0	 346.207406	 -1	 0.000000	 3.909734
46	 9	 9	 0	 441.107770	 -1	 0.000000	 3.202149
47	 9	 9	 1	 187.336070	 -1	 0.000000	 9.556528
48	 9	 9	 1	 173.963275	 -1	 0.000000	 8.204485
49	 9	 9	 0	 359.635576	 -1	 0.000000	 2.882549
50	 9	 9	 0	 394.052165	 -1	 0.000000	 5.286364
51	 9	 9	 0	 346.586717	 -1	 0.000000	 4.982852
52	 9	 9	 1	 166.027250	 -1	 0.000000	 3.745424
53	 9	 9	 0	 388.273950	 -1	 0.000000	 8.649026
54	 9	 9	 0	 404.348701	 -1	 0.000000	 5.892550
55	 9	 9	 1	 220.359451	 -1	 0.000000	 3.584525
56	 9	 9	 1	 180.121634	 -1	 0.000000	 6.875624
57	 9	 9	 1	 161.133156	 -1	 0.000000	 7.126374
58	 9	 9	 0	 399.262819	 -1	 0.000000	 4.399521
59	 9	 9	 0	 447.917883	 -1	 0.000000	 5.114671
60	 9	 9	 0	 210.425054	 -1	 0.000000	 4.067572
61	 9	 9	 0	 238.243885	 -1	 0.000000	 9.422239
62	 9	 9	 0	 307.555718	 -1	 0.000000	 2.644207
63	 9	 9	 1	 202.407963	 -1	 0.000000	 5.746309
64	 9	 9	 0	 402.889939	 -1	 0.000000	 4.316216
65	 9	 9	 0	 371.984155	 -1	 0.000000	 5.844570
66	 9	 9	 0	 394.559524	 -1	 0.000000	 4.851381
67	 9	 9	 1	 220.004810	 -1	 0.000000	 6.014378
68	 9	 9	 1	 155.085269	 -1	 0.000000	 9.073769
69	 9	 9	 0	 335.162494	 -1	 0.000000	 5.159031
70	 9	 9	 0	 389.375900	 -1	 0.000000	 4.573626
71	 9	 9	 0	 259.926049	 -1	 0.000000	 7.146308
72	 9	 9	 1	 201.290821	 -1	 0.000000	 5.728419
73	 9	 9	 1	 242.539558	 -1	 0.000000	 7.670002
74	 9	 9	 0	 274.218813	 -1	 0.000000	 5.636048
75	 9	 9	 1	 207.005162	 -1	 0.000000	 14.927826
76	 9	 9	 0	 372.219111	 -1	 0.000000	 3.564449
77	 9	 9	 0	 412.682622	 -1	 0.000000	 4.166890
78	 9	 9	 0	 385.348437	 -1	 0.000000	 5.777316
79	 9	 9	 0	 317.282080	 -1	 0.000000	 3.822608
80	 9	 9	 0	 418.973986	 -1	 0.000000	 4.817136
81	 9	 9	 1	 179.696867	 -1	 0.000000	 4.086070
82	 9	 9	 0	 323.459279	 -1	 0.000000	 10.734698
83	 9	 9	 1	 177.104525	 -1	 0.000000	 15.176831
84	 9	 9	 0	 295.192512	 -1	 0.000000	 3.923113
85	 9	 9	 1	 248.567097	 -1	 0.000000	 4.481030
86	 9	 9	 0	 409.378259	 -1	 0.000000	 4.270363
87	 9	 9	 0	 343.299507	 -1	 0.000000	 5.239076
88	 9	 9	 0	 372.121586	 -1	 0.000000	 5.859993
89	 9	 9	 0	 359.080846	 -1	 0.000000	 5.716984
90	 9	 9	 0	 293.293748	 -1	 0.000000	 3.639281
91	 9	 9	 0	 381.807685	 -1	 0.000000	 6.731493
92	 9	 9	 1	 207.076503	 -1	 0.000000	 4.172508
93	 9	 9	 1	 197.765675	 -1	 0.000000	 8.294868
94	 9	 9	 1	 197.030450	 -1	 0.000000	 5.222569
95	 9	 9	 1	 201.671663	 -1	 0.000000	 7.649307
96	 9	 9	 0	 376.795733	 -1	 0.000000	 4.854064
97	 9	 9	 0	 395.525012	 -1	 0.000000	 6.305195
98	 9	 9	 0	 355.719523	 -1	 0.000000	 6.039940
99	 9	 9	 1	 164.515386	 -1	 0.000000	 7.413795
100	 9	 9	 0	 377.245470	 -1	 0.000000	 9.718065
101	 9	 9	 1	 211.201819	 -1	 0.000000	 10.822017
102	 9	 9	 0	 367.369067	 -1	 0.000000	 4.429873
103	 9	 9	 0	 364.095665	 -1	 0.000000	 5.498297
104	 9	 9	 1	 160.339708	 -1	 0.000000	 8.325426
105	 9	 9	 0	 329.132327	 -1	 0.000000	 10.567348
106	 9	 9	 0	 299.457399	 -1	 0.000000	 6.642263
107	 9	 9	 0	 408.505060	 -1	 0.000000	 11.271628
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 9	 9	 1	 183.294561	 -1	 0.000000	 3.689657
1	 9	 9	 1	 174.071974	 -1	 0.000000	 7.800103
2	 9	 9	 0	 275.520878	 -1	 0.000000	 4.703149
3	 9	 9	 0	 355.474091	 -1	 0.000000	 6.401350
4	 9	 9	 0	 401.526665	 -1	 0.000000	 5.665602
5	 9	 9	 0	 373.148412	 -1	 0.000000	 6.125259
6	 9	 9	 0	 261.200543	 -1	 0.000000	 5.277782
7	 9	 9	 0	 290.372637	 -1	 0.000000	 4.826412
8	 9	 9	 0	 391.519835	 -1	 0.000000	 7.744471
9	 9	 9	 1	 154.060222	 -1	 0.000000	 5.401225
10	 9	 9	 0	 380.988638	 -1	 0.000000	 3.092175
11	 9	 9	 1	 185.297774	 -1	 0.000000	 5.342290
12	 9	 9	 0	 367.690609	 -1	 0.000000	 3.470062
13	 9	 9	 0	 385.985317	 -1	 0.000000	 6.315868
14	 9	 9	 0	 299.328060	 -1	 0.000000	 8.218781
15	 9	 9	 1	 190.648496	 -1	 0.000000	 7.309247
16	 9	 9	 0	 399.136193	 -1	 0.000000	 5.999795
17	 9	 9	 0	 291.609241	 -1	 0.000000	 6.492624
18	 9	 9	 0	 283.357897	 -1	 0.000000	 2.815691
19	 9	 9	 1	 133.084595	 -1	 0.000000	 6.701530
20	 9	 9	 1	 213.186754	 -1	 0.000000	 12.796970
21	 9	 9	 0	 356.767155	 -1	 0.000000	 4.849034
22	 9	 9	 0	 296.574097	 -1	 0.000000	 7.616409
23	 9	 9	 1	 232.170886	 -1	 0.000000	 4.408365
24	 9	 9	 0	 417.556199	 -1	 0.000000	 4.845200
25	 9	 9	 0	 314.786094	 -1	 0.000000	 3.735291
26	 9	 9	 0	 381.730351	 -1	 0.000000	 4.459831
27	 9	 9	 1	 217.560549	 -1	 0.000000	 3.364567
28	 9	 9	 0	 398.514951	 -1	 0.000000	 4.491290
29	 9	 9	 0	 390.170588	 -1	 0.000000	 5.924611
30	 9	 9	 1	 242.665031	 -1	 0.000000	 6.535131
31	 9	 9	 0	 397.236941	 -1	 0.000000	 5.013314
32	 9	 9	 1	 248.919231	 -1	 0.000000	 7.260201
33	 9	 9	 0	 264.388061	 -1	 0.000000	 4.273285
34	 9	 9	 0	 275.411593	 -1	 0.000000	 5.230577
35	 9	 9	 0	 371.693801	 -1	 0.000000	 2.077415
36	 9	 9	 0	 374.998649	 -1	 0.000000	 4.971730
37	 9	 9	 0	 386.088858	 -1	 0.000000	 4.842125
38	 9	 9	 1	 149.613836	 -1	 0.000000	 10.878463
39	 9	 9	 0	 340.318314	 -1	 0.000000	 5.587777
40	 9	 9	 0	 401.538399	 -1	 0.000000	 7.118189
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 11	 11	 0	 402.149045	 -1	 0.000000	 4.120515
1	 11	 11	 0	 421.132599	 -1	 0.000000	 4.150677
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 11	 11	 1	 216.930820	 -1	 0.000000	 5.352120
1	 11	 11	 0	 417.501654	 -1	 0.000000	 5.103340
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 10	 10	 0	 474.726700	 -1	 0.000000	 12.674941
1	 10	 10	 0	 473.491599	 -1	 0.000000	 3.669339
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
0	 10	 10	 0	 470.651005	 -1	 0.000000	 5.879792
1	 10	 10	 0	 479.991992	 -1	 0.000000	 3.485197
>>> gr_fir_ccf: using E
>>> gr_fir_fff: using E
gr_buffer::allocate_buffer: warning: tried to allocate
   47 items of size 1392. Due to alignment requirements
   256 were allocated.  If this isn't OK, consider padding
   your structure to a power-of-two bytes.
   On this platform, our allocation granularity is 4096 bytes.
