#!/usr/bin/env python
#
# Copyright 2005, 2006 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

"""
NOTE: We disable deinterleaving and depuncturing for now, as the channel 
width change is not supported in these modules yet. We still implement
puncturing but not interleaving.
"""

import copy, math, sys, time
from gnuradio import gr, gru, eng_notation, flex
import gnuradio.gr.gr_threading as _threadingr
from gnuradio.blks2impl import psk, qam
from gnuradio import trellis

import flex_ofdm_packet_utils as ofdm_packet_utils
import flex_ofdm_receiver_custom as ofdm_receiver
from flex_ofdm_packet_utils import *

class ofdm_mod(gr.hier_block2):
	def __init__(self, options, payload='', msgq_limit=1, pad_for_usrp=False):
		gr.hier_block2.__init__(self, "ofdm_mod",
				gr.io_signature(0, 0, 0),       # Input signature
				gr.io_signature(1, 1, gr.sizeof_gr_complex)) # Output signature	

		self._pad_for_usrp = pad_for_usrp
		self._sender = options.sender
		if self._sender:	
			self._modulation_pkt = options.modulation_pkt_sender	# modulation for the payload
			self._modulation_base = options.modulation_base_sender	# modulation for the header
			self._occupied_tones = options.occupied_tones_sender	
			self._num_groups = options.num_groups
			self._width_map = options.width_map
			self._tone_map = self.width_to_tone_map(self._width_map)	
			#self._tone_map = options.tone_map_sender	# string with used subcarrier map
			self._nc_filter = options.nc_filter_sender # linklab
			self._scale = options.scale_sender
		else:	
			self._modulation_pkt = options.modulation_pkt_recv	# modulation for the payload
			self._modulation_base = options.modulation_base_recv	# modulation for the header
			self._occupied_tones = options.occupied_tones_recv	
			self._tone_map = options.tone_map_recv	# string with used subcarrier map
			self._nc_filter = options.nc_filter_recv # linklab
			self._scale = options.scale_recv

		self._fft_length = options.fft_length
		self._cp_length = options.cp_length	
		self._fsm_file = options.fsm
		self._punct = False
		self.mods = {"bpsk": 2, "bpsk++": 2, "qpsk": 4, "qpsk++" : 4, "qam8" : 8, "qam8++" : 8, "qam16": 16, "qam16++": 16, "qam64":64, "qam64+-":64, "qam64++":64, "qam256":256, "qam256++":256 }
		self.mods_bits = {"bpsk": 1, "bpsk++": 1, "qpsk": 2, "qpsk++" : 2, "qam8" : 3, "qam8++" : 3, "qam16": 4, "qam16++": 4, "qam64":6, "qam64+-":6, "qam64++":6, "qam256":8, "qam256++":8 }
		
		win = [] #[1 for i in range(self._fft_length)]
		symbol_length = options.fft_length + options.cp_length
		
		if ((4*len(self._tone_map) != self._occupied_tones) & (self._tone_map != 'FFFF')):
			print("Error: --carrier-map size %d is no equal to # of --occupied-tones") %(4*(len(self._tone_map)))
			raise SystemExit
		if ((self._fft_length < self._occupied_tones) | (self._fft_length < self._cp_length)):
			print("Error: --occupied-tones or --cp-length specified must not biger than --fft-length")
			raise SystemExit

		# Set the preamble, occupied carriers
		self.calc_tone_map(self._tone_map)

		# Per subcarrier power allocation
		self.scale_array = [None]*self._occupied_tones
		for i in range(self._occupied_tones):
			if (self._scale == "const"):
				self.scale_array[i] = 1.0
			elif (self._scale == "linear_down"):
				self.scale_array[i] = 1 - (i/self._occupied_tones)
			elif (self._scale == "linear_up"):
				self.scale_array[i] = 0 + (i/self._occupied_tones)
			else: 
				print ("Error: unrecognized subcarrier scaling")
				raise SystemExit
		
		# Header modulation variables
		self.arity_base = self.mods[self._modulation_base]                
		rot = 1
		if self._modulation_base == "qpsk":
			rot = (0.707+0.707j)
		if(self._modulation_base.find("psk") >= 0):
			self.rotated_const_base = map(lambda pt: pt * rot, psk.gray_constellation[self.arity_base])
		elif(self._modulation_base.find("qam") >= 0):
			self.rotated_const_base = map(lambda pt: pt * rot, qam.constellation[self.arity_base])

		# Packet modulation variables
		self.arity_pkt = self.mods[self._modulation_pkt]                
		rot = 1
		if self._modulation_pkt == "qpsk":
			rot = (0.707+0.707j)
		if(self._modulation_pkt.find("psk") >= 0):
			self.rotated_const_pkt = map(lambda pt: pt * rot, psk.gray_constellation[self.arity_pkt])
		elif(self._modulation_pkt.find("qam") >= 0):
			self.rotated_const_pkt = map(lambda pt: pt * rot, qam.constellation[self.arity_pkt])

		# encoding
		k = 1
		n = 2
		f = trellis.fsm(k, n, [ 0133, 0171 ])

		# for DISABLED puncturing comment all lines up to END_DISABLED 
		# punctured coding stuff
		if(self._modulation_pkt.find("++") >= 0 or self._modulation_pkt == "qam64+-"):
			self._punct = True
				
		if(self._modulation_pkt == "qam64+-"):
			self.punct_period = 2 #puncturing period
			punct_table = [1, 1, 1, 0] # rate 2/3, constraint len 7, pg 499 proakis
			punct_out = 3 #produe 3 bits for every punct_period*n bits
		else:
			self.punct_period = 3 #puncturing period
			punct_table = [1, 1, 1, 0, 0, 1] # rate 3/4, constraint len 7, pg 499 proakis
			punct_out = 4 #produe 4 bits for every punct_period*n bits
		if(self._punct):
			self._punct_skip_bits = flex.CODED_OFDM_HEADERLEN_BITS #size in uncoded bits TODO: why uncoded?
		else:
			self._punct_skip_bits = 2000*8*2 #max size of a packet, so we skip punct all through pkt
		self.punct = trellis.puncturing(self.punct_period, n, punct_out, self._punct_skip_bits , punct_table)						
		# END_DISABLED
		
		self._pkt_input = flex.framed_message_source(gr.sizeof_char, msgq_limit)
		self.unpack = gr.packed_to_unpacked_bb(k, gr.GR_LSB_FIRST)
		self.unpackencflag = gr.packed_to_unpacked_bb(k, gr.GR_MSB_FIRST)
		self.encoder = trellis.framed_encoder_bb(f, 0);
		self.pack = gr.unpacked_to_packed_bb(n, gr.GR_LSB_FIRST)

		# for DISABLED puncturing and interleaving comment all lines up to END_DISABLED 
		#self.interleaver = flex.ofdm_interleaver(self._data_carriers, self.mods_bits[self._modulation_pkt], flex.CODED_OFDM_HEADERLEN_CODED_BITS)
		self.unpackpunct = gr.packed_to_unpacked_bb(1, gr.GR_LSB_FIRST)
		self.packpunct = gr.unpacked_to_packed_bb(1, gr.GR_LSB_FIRST)
		self.unpackpunctflag = gr.packed_to_unpacked_bb(1, gr.GR_MSB_FIRST)
		self.packpunctflag = gr.unpacked_to_packed_bb(1, gr.GR_MSB_FIRST)
		# END_DISABLED

		self.mapper = flex.ofdm_mapper_bcv(self.rotated_const_pkt,
										self.rotated_const_base, 
										msgq_limit,self._occupied_tones, 
										self._fft_length, 
										self._tone_map, 
										self.scale_array)
										
		self.sink = flex.framed_message_sink(gr.sizeof_char, self.mapper.msgq(), False)

		self.preambles = flex.ofdm_insert_preamble(self._fft_length, self._padded_preambles)
		self.ifft = gr.fft_vcc(self._fft_length, False, win, True)
		self.cp_adder = gr.ofdm_cyclic_prefixer(self._fft_length, symbol_length)
		self.scale = gr.multiply_const_cc(1.0 / math.sqrt(self._fft_length))

		self.connect((self._pkt_input, 0), self.unpack, (self.encoder, 0), self.pack)
		self.connect((self._pkt_input, 1), self.unpackencflag, (self.encoder, 1))
		
		#self.connect(self.pack, (self.sink, 0))
		#self.connect((self._pkt_input, 1), (self.sink, 1)) #corresponding flags

		#self.connect((self.punct,0), (self.interleaver,0), self.packpunct, (self.sink, 0)) #punctured bits into sink
		#self.connect((self.punct,1), (self.interleaver,1), self.packpunctflag, (self.sink, 1)) #corresponding flags

		#self.connect(self.pack, self.unpackpunct, (self.interleaver, 0), self.packpunct, (self.sink, 0))
		#self.connect((self._pkt_input, 1), self.unpackpunctflag, (self.interleaver,1), self.packpunctflag, (self.sink, 1))

		# for DISABLED puncturing and interleaving comment all lines up to END_DISABLED       
		self.connect(self.pack, self.unpackpunct, (self.punct,0)) #coded bits into punct
		self.connect((self._pkt_input, 1), self.unpackpunctflag, (self.punct, 1)) #uncoded flags into punct
		self.connect((self.punct,0), self.packpunct, (self.sink, 0)) #punctured bits into sink
		self.connect((self.punct,1), self.packpunctflag, (self.sink, 1)) #corresponding flags
		# END_DISABLED 
		
		self.connect((self.mapper, 0), (self.preambles, 0))
		self.connect((self.mapper, 1), (self.preambles, 1))
		self.connect(self.preambles, self.ifft, self.cp_adder, self.scale, self)

		if options.verbose:
			self._print_verbage()	

		if options.log:
			self.connect(self._pkt_input, gr.file_sink(gr.sizeof_char, "flex_first_source_b.dat"))
			self.connect((self._pkt_input, 1), gr.file_sink(gr.sizeof_char, "flex_first_source_signal_b.dat"))
			self.connect(self.unpack, gr.file_sink(gr.sizeof_char, "flex_first_unpack_b.dat"))
			self.connect(self.encoder, gr.file_sink(gr.sizeof_char, "flex_encoded_b.dat"))			
			self.connect(self.pack, gr.file_sink(gr.sizeof_char, "flex_encoded_packed_b.dat"))
			# for DISABLED puncturing and interleaving comment all lines up to END_DISABLED  		
			self.connect(self.unpackpunct, gr.file_sink(gr.sizeof_char, "flex_encoded_unpacked_b.dat"))
			self.connect(self.unpackpunctflag, gr.file_sink(gr.sizeof_char, "flex_encoded_unpacked_signal_b.dat"))
			self.connect(self.punct, gr.file_sink(gr.sizeof_char, "flex_punctured_b.dat"))
			self.connect((self.punct,1), gr.file_sink(gr.sizeof_char, "flex_punctured_signal_b.dat"))
			#self.connect(self.interleaver, gr.file_sink(gr.sizeof_char, "flex_interleaved_b.dat"))
			#self.connect(self.packpunctflag, gr.file_sink(gr.sizeof_char, "flex_interleaved_signal_b.dat"))
			# END_DISABLED 		
			self.connect(self.mapper, gr.file_sink(gr.sizeof_gr_complex*options.fft_length, "flex_ofdm_modulated_c.dat"))
			self.connect(self.preambles, gr.file_sink(gr.sizeof_gr_complex*options.fft_length, "flex_ofdm_preambles.dat"))
			self.connect(self.ifft, gr.file_sink(gr.sizeof_gr_complex*options.fft_length, "flex_ofdm_ifft_c.dat"))
			self.connect(self.cp_adder, gr.file_sink(gr.sizeof_gr_complex, "flex_ofdm_cp_adder_c.dat"))

	"""
	Convert coded width to the actual tone map
	"""
	def width_to_tone_map(self, group_map):

		chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']
  
		group_size = int(math.floor((self._occupied_tones - 4)/self._num_groups))
		tone_map = ""
		tone_map_bin = [0]*self._occupied_tones
		zeros_on_left = int(math.ceil((self._occupied_tones - (group_size*self._num_groups+4))/2.0))

		for i in range(len(group_map)):
			if group_map[i:i+1] == "1":
				if i <= int(math.floor(self._num_groups/2.0)):
					k = 0
				else:
					k = 1
									
				j = 0
				n = group_size				
				while j < n:
					if (zeros_on_left + i*group_size + k*4 + j < self._fft_length/2 - 2) or (zeros_on_left + i*group_size + k*4 + j > self._fft_length/2 + 1):
						tone_map_bin[zeros_on_left + i*group_size + k*4 + j] = 1
					else:
						n += 1
					j += 1
		
		character = ""
		for i in range(self._occupied_tones):
			character += str(tone_map_bin[i])
			if i%4 == 3:
				tone_map += chars[int(character, 2)]
				character = ""	
		return tone_map
	

	def calc_tone_map(self, tone_map):
		self._tone_map = tone_map
		self._tone_map_bin = []
		self._data_carriers = 0
		self._zeros_on_left = int(math.ceil((self._fft_length - self._occupied_tones)/2.0))

		if self._sender:
			self._ksfreq = known_symbols_4512_3[self._zeros_on_left : self._zeros_on_left + self._occupied_tones] 
		else:
			self._ksfreq = known_symbols_4512_2[self._zeros_on_left : self._zeros_on_left + self._occupied_tones]

		if self._nc_filter and len(self._ksfreq) == 4*len(self._tone_map): 
			for i in range(len(self._ksfreq)):
				if((int(self._tone_map[i/4],16) >> (3-i%4)) & 1 ==0):
					self._tone_map_bin.append(0)
				else :
					self._tone_map_bin.append(1)
					self._data_carriers = self._data_carriers+1	
				if((self._zeros_on_left + i) & 1 | ((int(self._tone_map[i/4],16) >> (3-i%4)) & 1 ==0)):
					self._ksfreq[i] = 0
				else: 
					self._ksfreq[i] = self._ksfreq[i]*math.sqrt(2)

		else:           
			for i in range(len(self._ksfreq)):
				self._tone_map_bin.append(1)
				if((self._zeros_on_left + i) & 1):
					self._ksfreq[i] = 0
				else: 
					self._ksfreq[i] = self._ksfreq[i]*math.sqrt(2)

		self._preambles = (self._ksfreq,)
		self._padded_preambles = list()
		for pre in self._preambles:
			padded = self._fft_length*[0,]
			padded[self._zeros_on_left : self._zeros_on_left + self._occupied_tones] = pre
			self._padded_preambles.append(padded)

	""" When changing modulation we have to modify:
	- mapper (constellations)	
	- interleaver (mod_bits) //we do not interleave for now, thus keep the same TODO: I CHANGED THE MAX_SYMBOL in ofdm_interleaver!
	- puncturing table (can omit for now) TODO: fix this!
	"""
	def calc_rotated_const(self, new_modulation):
		self._modulation_pkt = new_modulation
		self.arity_pkt = self.mods[self._modulation_pkt]
        
		rot = 1
		if self._modulation_pkt == "qpsk":
			rot = (0.707+0.707j)
            
		if(self._modulation_pkt.find("psk") >= 0):
			self.rotated_const_pkt = map(lambda pt: pt * rot, psk.gray_constellation[self.arity_pkt])
		elif(self._modulation_pkt.find("qam") >= 0):
			self.rotated_const_pkt = map(lambda pt: pt * rot, qam.constellation[self.arity_pkt])

		# DISABLED
		#if(self._modulation_pkt.find("++") >= 0 or self._modulation_pkt == "qam64+-"):
		#	self._punct = True
		#if(self._modulation_pkt == "qam64+-"):
		#	self.punct_period = 2 #puncturing period
		#	punct_table = [1, 1, 1, 0] # rate 2/3, constraint len 7, pg 499 proakis
		#	punct_out = 3 #produe 3 bits for every punct_period*n bits
		#else:
		#	self.punct_period = 3 #puncturing period
		#	punct_table = [1, 1, 1, 0, 0, 1] # rate 3/4, constraint len 7, pg 499 proakis
		#	punct_out = 4 #produe 4 bits for every punct_period*n bits
		#if(self._punct):
		#	self._punct_skip_bits = flex.CODED_OFDM_HEADERLEN_BITS #size in uncoded bits TODO: why uncoded?
		#else:
		#	self._punct_skip_bits = 2000*8*2 #max size of a packet, so we skip punct all through pkt
		#self.punct = trellis.puncturing(self.punct_period, n, punct_out, self._punct_skip_bits , punct_table)
		#self.interleaver = flex.ofdm_interleaver(self._data_carriers, self.mods_bits[self._modulation_pkt],
		#									flex.CODED_OFDM_HEADERLEN_CODED_BITS)
		# END_DISABLED

	def reset_ofdm_params(self, new_tone_map, new_modulation):
		print "Reset tone_map:", new_tone_map
		print "Reset pkt modulation:", new_modulation

		self._tone_map = new_tone_map
		self._modulation_pkt= new_modulation
		
		self.calc_tone_map(new_tone_map)
		self.calc_rotated_const(new_modulation)
		
		self.preambles.reset_preamble(self._padded_preambles)
		self.mapper.reset_ofdm_params(self.rotated_const_pkt, new_tone_map)	    

	def reset_ofdm_params_groups(self, new_group_map, new_modulation):
		self._width_map = new_group_map
		self.reset_ofdm_params(self.width_to_tone_map(self._width_map), new_modulation)
		
	def send_pkt(self, payload='', eof=False, seqno=0):	
		if eof:
			msg = gr.message(1) 
			self.mapper.msgq().insert_tail(msg)
			self._pkt_input.msgq().insert_tail(msg)
		else:	                        
			value = 'pktno='+str(seqno)+'\n'
			send_rate = {
				'bpsk':  flex.CODED_OFDM_RATE_BPSK_1_2,
				'bpsk++':  flex.CODED_OFDM_RATE_BPSK_3_4,
				'qpsk':  flex.CODED_OFDM_RATE_QPSK_1_2,
				'qpsk++':  flex.CODED_OFDM_RATE_QPSK_3_4,
				'qam8': flex.CODED_OFDM_RATE_8QAM_1_2,
				'qam8++': flex.CODED_OFDM_RATE_8QAM_3_4,
				'qam16': flex.CODED_OFDM_RATE_16QAM_1_2,
				'qam16++': flex.CODED_OFDM_RATE_16QAM_3_4,
				'qam64': flex.CODED_OFDM_RATE_64QAM_1_2,
				'qam64+-': flex.CODED_OFDM_RATE_64QAM_2_3,				
				'qam64++': flex.CODED_OFDM_RATE_64QAM_3_4,
				'qam256': flex.CODED_OFDM_RATE_256QAM_1_2,
				'qam256++': flex.CODED_OFDM_RATE_256QAM_3_4
			} [self._modulation_pkt];

			pkt = make_packet(payload, 1, 1, self._pad_for_usrp,
							whitening=True, coded_header=True,
							rate=send_rate, seqno=seqno)
			#print "pkt =", string_to_hex_list(pkt)
			msg = gr.message_from_string(pkt)
			if(self._punct & len(pkt) % self.punct_period != 0):
				print "WARNING: packet size after header and footer must be multiple of ", self.punct_period
				print "send packet abroted"
			else:
self._pkt_input.msgq().insert_tail(msg)

	def add_options(normal, expert):
		"""
		Adds OFDM-specific options to the Options Parser
		"""		
		normal.add_option("", "--modulation-pkt-sender", type="string", default="qam64", help="set pkt modulation type [default=%default]")
		normal.add_option("", "--modulation-base-sender", type="string", default="bpsk", help="set base modulation type [default=%default]")
		expert.add_option("", "--tone-map-sender", type="string", default="", help="set the mask of data carriers [default=%default]")
		expert.add_option("", "--scale-sender", type="string", default="const", help="set the power allocation over subcarriers [default=%default]")
		expert.add_option("", "--width-map", type="string", default="1111111", help="width map of OFDM subcarrier groups [default=%default]")
		expert.add_option("", "--num_groups", type="intx", default=7, help="number of OFDM subcarrier groups [default=%default]")				
		expert.add_option("", "--occupied-tones-sender", type="intx", default=468, help="set the number of occupied FFT bins [default=%default]")
		expert.add_option("", "--nc-filter-sender", action="store_false", default=True)
		normal.add_option("", "--modulation-pkt-recv", type="string", default="bpsk", help="set pkt modulation type [default=%default]")
		normal.add_option("", "--modulation-base-recv", type="string", default="bpsk", help="set base modulation type [default=%default]")
		expert.add_option("", "--tone-map-recv", type="string", default="", help="set the mask of data carriers [default=%default]")
		expert.add_option("", "--scale-recv", type="string", default="const", help="set the power allocation over subcarriers [default=%default]")
		expert.add_option("", "--occupied-tones-recv", type="intx", default=468, help="set the number of occupied FFT bins [default=%default]")
		expert.add_option("", "--nc-filter-recv", action="store_false", default=True)
		expert.add_option("", "--fsm", type="string", default="fsm_files/awgn1o2_4.fsm", help="set the fsm for channel coding [default=%default]")
		expert.add_option("", "--cp-length", type="intx", default=128, help="set the number of bits in the cyclic prefix [default=%default]")
		expert.add_option("", "--fft-length", type="intx", default=512, help="set the number of FFT bins [default=%default]")

	add_options = staticmethod(add_options)

	def _print_verbage(self):
		print "\nOFDM Modulator:"
		print "Modulation Type pkts: %s"    % (self._modulation_pkt)
		print "Modulation Type base: %s"    % (self._modulation_base)
		print "FFT length:      %3d"   % (self._fft_length)
		print "Occupied Tones:  %3d"   % (self._occupied_tones)
		print "Tone mask:  	%s"    % (self._tone_map)
		print "CP length:       %3d"   % (self._cp_length)

class ofdm_demod(gr.hier_block2):
	def __init__(self, options, callback=None):

		gr.hier_block2.__init__(self, "ofdm_demod",
				gr.io_signature(1, 1, gr.sizeof_gr_complex), # Input signature
				gr.io_signature(1, 1, gr.sizeof_gr_complex)) # Output signature

		self._rcvd_pktq = gr.msg_queue()          # holds packets from the PHY
		
		self._sender = options.sender

		if not self._sender:
			self._modulation_pkt = options.modulation_pkt_sender    # modulation for the payload
			self._modulation_base = options.modulation_base_sender  # modulation for the header
			self._occupied_tones = options.occupied_tones_sender
			self._num_groups = options.num_groups
			self._width_map = options.width_map
			self._tone_map = self.width_to_tone_map(self._width_map)				
			#self._tone_map = options.tone_map_sender        # string with used subcarrier map
			self._nc_filter = options.nc_filter_sender # linklab
			self._scale = options.scale_sender
		else:
			self._modulation_pkt = options.modulation_pkt_recv  # modulation for the payload
			self._modulation_base = options.modulation_base_recv        # modulation for the header
			self._occupied_tones = options.occupied_tones_recv
			self._tone_map = options.tone_map_recv      # string with used subcarrier map
			self._nc_filter = options.nc_filter_recv # linklab
			self._scale = options.scale_recv

		self._fft_length = options.fft_length
		self._cp_length = options.cp_length
		self._snr = options.snr
		self._fsm_file = options.fsm

		if ((4*len(self._tone_map) != self._occupied_tones) & (self._tone_map != 'FFFF')):
			print("Error: --tone-map size %d is no equal to # of --occupied-tones") %(4*(len(self._tone_map)))
			raise SystemExit
		if ((self._fft_length < self._occupied_tones) | (self._fft_length < self._cp_length)):
			print("Error: --occupied-tones or --cp-length specified must not biger than --fft-length")
			raise SystemExit

		self.calc_tone_map(self._tone_map)    
        
		symbol_length = self._fft_length + self._cp_length
		self.ofdm_recv = ofdm_receiver.ofdm_receiver(self._fft_length, self._cp_length,
							self._occupied_tones, self._snr, self._preambles, self._carrier_map_bin,
							self._nc_filter, options.log)

		# DISABLED
		self._punct = False
		if(self._modulation_pkt.find("++") >= 0 or self._modulation_pkt == "qam64+-"):
			self._punct = True
		if(self._modulation_pkt == "qam64+-"):
			#self.punct_period = 2 #puncturing period
			punct_table = [1, 1, 1, 0] # rate 2/3, constraint len 7, pg 499 proakis
			#punct_table = [1, 1, 1, 0, 0, 1]
			#punct_out = 3 #produe 3 bits for every punct_period*n bits
		else:
			#self.punct_period = 3 #puncturing period
			punct_table = [1, 1, 1, 0, 0, 1] # rate 3/4, constraint len 7, pg 499 proakis
			#punct_out = 4 #produe 4 bits for every punct_period*n bits
		# END_DISABLED
		
		rot = 1
		bpsk_const = psk.gray_constellation[2]
		qpsk_const = map(lambda pt: pt * (0.707+0.707j), psk.gray_constellation[4])
		qam8_const = map(lambda pt: pt * rot, qam.constellation[8])		
		qam16_const = map(lambda pt: pt * rot, qam.constellation[16])												
		qam64_const = map(lambda pt: pt * rot, qam.constellation[64])
		qam256_const = map(lambda pt: pt * rot, qam.constellation[256])	
		
		# these are just initial settings, should be modified in the demodulator
		self._phgain = 0.25
		self._frgain = self._phgain*self._phgain / 4.0

		self.f = trellis.fsm(1, 2, [ 0133, 0171 ])
		siso_D = 4 #four floats (corresponding to two bits + confidences)
		siso_tbl = [ 1, 0,  1, 0, #i.e., metric[00] = input[0] + input[2] 
					1, 0, 0, 1,
					0, 1,  1, 0,
					0, 1, 0, 1]

		self.hdr_siso = trellis.siso_combined_f(self.f,
												flex.CODED_OFDM_HEADERLEN_BITS, 
												0, 0, True, False, 
												trellis.TRELLIS_MIN_SUM,
												siso_D, siso_tbl, 
												trellis.TRELLIS_SUM_SOFT_VAL)
        
		self.body_siso = trellis.siso_combined_packet(0, self.f, 0, 0, True, False, 
														trellis.TRELLIS_MIN_SUM,
														siso_D, siso_tbl,  
														trellis.TRELLIS_SUM_SOFT_VAL)
		
		self.ofdm_demod = flex.coded_ofdm_demod(self.body_siso.sisoctl_msgq(),
											bpsk_const, range(2), 
											qpsk_const, range(4),
											qam8_const, range(8), 											
											qam16_const, range(16), 
											qam64_const, range(64),
											qam256_const, range(256),											
											self._fft_length, self._occupied_tones, self._carrier_map_bin_str,
											self._phgain, self._frgain)
		
		self.ofdm_demod2softin = flex.coded_ofdm_demod2softin(0)
		
		softin_item_size = 2
		
		# DISABLED
		#self.deinterleaver = flex.ofdm_deinterleaver(self._data_carriers, softin_item_size)
		self.depunct = trellis.depuncturing(softin_item_size, punct_table) 
		# END_DISABLED
			
		self.hdr_enable_f = gr.stream_enable_ff(flex.CODED_OFDM_DEMOD_HDR_SEL)
		self.body_enable_f = gr.stream_enable_inv_ff(flex.CODED_OFDM_DEMOD_HDR_SEL)
		self.header_stream2vec = gr.stream_to_vector(gr.sizeof_char, flex.CODED_OFDM_HEADERLEN_BYTES)
		self.hdr_decode = flex.ofdm_header_decode_vbb(self.ofdm_demod.hdrctl_msgq(), flex.CODED_OFDM_FOOTERLEN_BYTES)
		self.slice_body = trellis.slice_body_siso_output_fb(2, [1, 0], self.body_siso.body_siso_msgq(), self.ofdm_demod.good_hdrctl_msgq(), self._rcvd_pktq, "dump_file.dat")
		self.slice_head = trellis.slice_siso_output_fb(2, [1, 0])
		self.head_packer = gr.unpacked_to_packed_bb(1, gr.GR_LSB_FIRST)

		self.connect(self, self.ofdm_recv)
		
		#self.connect((self.ofdm_recv, 0), gr.null_sink(gr.sizeof_gr_complex*self._occupied_tones))
		#self.connect((self.ofdm_recv, 1), gr.null_sink(gr.sizeof_char))	# false timing
		#self.connect((self.ofdm_recv, 2), gr.null_sink(gr.sizeof_char))	# timing
		#self.connect((self.ofdm_recv, 3), gr.null_sink(gr.sizeof_float))	# snr 

		self.connect((self.ofdm_recv, 0), (self.ofdm_demod, 0))	# samples gr_complex*occupied_tones
		self.connect((self.ofdm_recv, 1), gr.null_sink(gr.sizeof_char))#(self.ofdm_demod, 1))	# false timing TODO: get rid of this
		self.connect((self.ofdm_recv, 2), (self.ofdm_demod, 1))	# timing
		self.connect((self.ofdm_recv, 3), (self.ofdm_demod, 2))	# snr 
	
		#self.connect((self.ofdm_demod, 0), gr.null_sink(gr.sizeof_gr_complex)) # demodulated
		#self.connect((self.ofdm_demod, 1), gr.null_sink(gr.sizeof_gr_complex)) # demodulated derotated
		#self.connect((self.ofdm_demod, 2), gr.null_sink(gr.sizeof_float))                        # confidence
		#self.connect((self.ofdm_demod, 3), gr.null_sink(1))                        # bits
		#self.connect((self.ofdm_demod, 4), gr.null_sink(1))                        # signal

		self.connect((self.ofdm_demod, 0), gr.null_sink(gr.sizeof_gr_complex))	# demodulated
		self.connect((self.ofdm_demod, 1), gr.null_sink(gr.sizeof_gr_complex))	# demodulated derotated
		self.connect((self.ofdm_demod, 2), (self.ofdm_demod2softin, 0))			# confidence
		self.connect((self.ofdm_demod, 3), (self.ofdm_demod2softin, 1))			# bits
		self.connect((self.ofdm_demod, 4), (self.ofdm_demod2softin, 2))			# signal
		
		self.connect((self.ofdm_demod2softin,0), (self.hdr_enable_f,0))
		self.connect((self.ofdm_demod2softin,0), (self.body_enable_f,0))
		self.connect((self.ofdm_demod2softin,1), (self.hdr_enable_f,1))
		self.connect((self.ofdm_demod2softin,1), (self.body_enable_f,1))
		
		self.connect(self.hdr_enable_f, (self.hdr_siso, 1))		
		self.connect(self.hdr_siso, self.slice_head, self.head_packer, self.header_stream2vec, self.hdr_decode)
		self.connect((self.hdr_decode, 0), gr.null_sink(gr.sizeof_char))
		self.connect((self.hdr_decode, 1), gr.null_sink(gr.sizeof_short))
		self.connect((self.hdr_decode, 2), gr.null_sink(gr.sizeof_char))                                                  						
		
		# DISABLED					
		#self.connect((self.body_enable_f,0),(self.deinterleaver,0), (self.depunct,0))
		#self.connect((self.body_enable_f,1),(self.deinterleaver,1), (self.depunct,1))
		#self.connect(self.depunct, (self.body_siso,1))
		# END_DISABLED
		
		# DISABLED					
		self.connect((self.body_enable_f,0), (self.depunct,0))
		self.connect((self.body_enable_f,1), (self.depunct,1))
		self.connect(self.depunct, (self.body_siso,1))
		# END_DISABLED
		
		#self.connect((self.body_enable_f,1), gr.null_sink(gr.sizeof_char))			
		#self.connect(self.body_enable_f, (self.body_siso,1))
		
		self.connect(self.body_siso, self.slice_body, gr.unpacked_to_packed_bb(1, gr.GR_LSB_FIRST), gr.null_sink(gr.sizeof_char))
		
		self.connect(gr.vector_source_f([0], True), (self.hdr_siso, 0))
		self.connect(gr.vector_source_f([0], True), (self.body_siso, 0))
		
		self.connect(gr.null_source(gr.sizeof_gr_complex), self)

		if options.log:
			# Getting the bits:
			self.connect((self.ofdm_demod, 0), gr.file_sink(gr.sizeof_gr_complex, "flex_ofdm_demod_data_c.dat"))
			self.connect((self.ofdm_demod, 1), gr.file_sink(gr.sizeof_gr_complex, "flex_ofdm_demod_data_derot_c.dat"))
			self.connect((self.ofdm_demod, 2), gr.file_sink(gr.sizeof_float, "flex_ofdm_demod_conf_f.dat"))
			self.connect((self.ofdm_demod, 3), gr.file_sink(gr.sizeof_char, "flex_ofdm_demod_bits_b.dat"))			
			self.connect((self.ofdm_demod, 4), gr.file_sink(gr.sizeof_char, "flex_ofdm_demod_sel_b.dat"))
			# Doing something with them:
			self.connect((self.ofdm_demod2softin, 0), gr.file_sink(gr.sizeof_float, "flex_ofdm_demod2softin_conf_f.dat"))
			self.connect((self.ofdm_demod2softin, 1), gr.file_sink(gr.sizeof_char, "flex_ofdm_demod2softin_rate_b.dat"))
			self.connect((self.hdr_enable_f, 0), gr.file_sink(gr.sizeof_float, "flex_ofdm_hdr_enable_f.dat"))
			self.connect((self.body_enable_f, 0), gr.file_sink(gr.sizeof_float, "flex_ofdm_body_enable_f.dat"))
			self.connect((self.body_enable_f, 1), gr.file_sink(gr.sizeof_char, "flex_ofdm_body_enable_sig_b.dat"))
			# DISABLED
			#self.connect((self.deinterleaver, 0), gr.file_sink(gr.sizeof_float, "flex_ofdm_deinterleaver_f.dat"))
			#self.connect((self.deinterleaver, 1), gr.file_sink(gr.sizeof_char, "flex_ofdm_deinterleaver_sig_b.dat"))			
			#self.connect((self.depunct, 0), gr.file_sink(gr.sizeof_float, "flex_ofdm_depunct_f.dat"))
			# END_DISABLED
			self.connect((self.hdr_siso, 0), gr.file_sink(gr.sizeof_float, "flex_ofdm_hdr_siso_f.dat"))
			self.connect((self.body_siso, 0), gr.file_sink(gr.sizeof_float, "flex_ofdm_body_siso_f.dat"))
			self.connect((self.slice_body, 0), gr.file_sink(gr.sizeof_char, "flex_slice_body_b.dat"))
			self.connect((self.slice_head, 0), gr.file_sink(gr.sizeof_char, "flex_slice_head_b.dat"))
			self.connect((self.head_packer, 0), gr.file_sink(gr.sizeof_char, "flex_head_packer_b.dat"))
		
		if options.verbose:
			self._print_verbage()

		self._watcher = _queue_watcher_thread(self._rcvd_pktq, self.ofdm_recv, self, callback)

	def __del__(self):
		print "\nKILLING the OFDM demod block\n"
		self.ofdm_recv.__del__()
		self.ofdm_recv = None
		self.ofdm_demod.__del__()
		self.ofdm_demod2softin.__del__()
		self.hdr_enable_f.__del__()
		self.body_enable_f.__del__()

	def calc_tone_map(self, tone_map):
		self._tone_map = tone_map
		self._carrier_map_bin = []
		self._carrier_map_bin_str = ""
		self._data_carriers = 0
		self._zeros_on_left = int(math.ceil((self._fft_length - self._occupied_tones)/2.0))
		if self._sender:
			self._ksfreq = known_symbols_4512_2[self._zeros_on_left : self._zeros_on_left + self._occupied_tones]
		else:
			self._ksfreq = known_symbols_4512_3[self._zeros_on_left : self._zeros_on_left + self._occupied_tones]
		if self._nc_filter and len(self._ksfreq) == 4*len(self._tone_map): 
			for i in range(len(self._ksfreq)):
				if((int(self._tone_map[i/4],16) >> (3-i%4)) & 1 ==0):
					self._carrier_map_bin.append(0)
					self._carrier_map_bin_str += "0"
				else :
					self._carrier_map_bin.append(1)
					self._carrier_map_bin_str += "1"
					self._data_carriers = self._data_carriers + 1
				if((self._zeros_on_left + i) & 1 | ((int(self._tone_map[i/4],16) >> (3-i%4)) & 1 ==0)):
					self._ksfreq[i] = 0
				else: #linklab
					self._ksfreq[i] = self._ksfreq[i]*math.sqrt(2)
              
		else: #c-ofdm 
			for i in range(len(self._ksfreq)):
				self._carrier_map_bin.append(1)
				self._carrier_map_bin_str += "1"
				self._data_carriers = self._data_carriers + 1
			for i in range(len(self._ksfreq)):
				if((self._zeros_on_left + i) & 1):
					self._ksfreq[i] = 0
				else: #linklab
					self._ksfreq[i] = self._ksfreq[i]*math.sqrt(2)

		# hard-coded known symbols
		self._preambles = (self._ksfreq,)

	"""
	Convert coded width to the actual tone map
	"""
	def width_to_tone_map(self, group_map):

		chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']
  
		group_size = int(math.floor((self._occupied_tones - 4)/self._num_groups))
		tone_map = ""
		tone_map_bin = [0]*self._occupied_tones
		zeros_on_left = int(math.ceil((self._occupied_tones - (group_size*self._num_groups+4))/2.0))

		for i in range(len(group_map)):
			if group_map[i:i+1] == "1":
				if i <= int(math.floor(self._num_groups/2.0)):
					k = 0
				else:
					k = 1
									
				j = 0
				n = group_size				
				while j < n:
					if (zeros_on_left + i*group_size + k*4 + j < 254) or (zeros_on_left + i*group_size + k*4 + j > 257):
						tone_map_bin[zeros_on_left + i*group_size + k*4 + j] = 1
					else:
						n += 1
					j += 1
		
		character = ""
		for i in range(self._occupied_tones):
			character += str(tone_map_bin[i])
			if i%4 == 3:
				tone_map += chars[int(character, 2)]
				character = ""	
					
		return tone_map
	
	def width_ranking(self, gain_full):
		group_gain = [0]*self._num_groups
		group_size = int(math.floor((self._occupied_tones - 4)/self._num_groups))
		zeros_on_left = int(math.ceil((self._occupied_tones - (group_size*self._num_groups+4))/2.0))
		for i in range(self._num_groups):
			if i <= int(math.floor(self._num_groups/2.0)):
				k = 0
			else:
				k = 1
									
			j = 0
			n = group_size				
			while j < n:
				if (zeros_on_left + i*group_size + k*4 + j < 254) or (zeros_on_left + i*group_size + k*4 + j > 257):
					group_gain[i] += gain_full[zeros_on_left + i*group_size + k*4 + j]
				else:
					n += 1
				j += 1
			group_gain[i] = group_gain[i]/float(group_size)
				
		group_sort = range(len(group_gain))
		group_sort.sort(lambda x,y: int(group_gain[y]*100) - int(group_gain[x]*100))
		print "Gains: "+str(group_gain)
		print "Sort: "+str(group_sort)
		return group_sort
	
	# linklab, change carrier map
	def reset_ofdm_params(self, new_width_map):
		self._width_map = new_width_map
		self._tone_map = self.width_to_tone_map(self._width_map)			
		print "Reset width map: %s\n" % self._width_map
		
		if ((4*len(self._tone_map) != self._occupied_tones) & (self._tone_map != 'FFFF')):
			print("Error: --tone-map size %d is no equal to # of --occupied-tones") %(4*(len(self._tone_map)))
			raise SystemExit
		if ((self._fft_length < self._occupied_tones) | (self._fft_length < self._cp_length)):
			print("Error: --occupied-tones or --cp-length specified must not biger than --fft-length")
			raise SystemExit
		
		self.calc_tone_map(self._tone_map)		
		self.ofdm_recv.reset_ofdm_params(self._preambles, self._carrier_map_bin)
		self.ofdm_demod.reset_ofdm_params(self._carrier_map_bin_str)

	# linklab, filter frequency offset compensation
	def filter_fo_comp(self, freq_offset):
		self.ofdm_recv.filter_fo_comp(freq_offset)

	def add_options(normal, expert):
		expert.add_option("", "--width-map", type="string", default="1111111", help="width map of OFDM subcarrier groups [default=%default]")
		expert.add_option("", "--num_groups", type="intx", default=7, help="number of OFDM subcarrier groups [default=%default]")			
		expert.add_option("", "--tone-map-sender", type="string", default="", help="set the mask of data carriers [default=%default]")
		expert.add_option("", "--occupied-tones-sender", type="intx", default=468, help="set the number of occupied FFT bins [default=%default]")
		expert.add_option("", "--nc-filter-sender", action="store_false", default=True)
		expert.add_option("", "--tone-map-recv", type="string", default="", help="set the mask of data carriers [default=%default]")
		expert.add_option("", "--occupied-tones-recv", type="intx", default=468, help="set the number of occupied FFT bins [default=%default]")
		expert.add_option("", "--nc-filter-recv", action="store_false", default=True)
		expert.add_option("", "--fsm", type="string", default="fsm_files/awgn1o2_4.fsm", help="set the fsm for channel coding [default=%default]")
		expert.add_option("", "--cp-length", type="intx", default=128, help="set the number of bits in the cyclic prefix [default=%default]")
		expert.add_option("", "--fft-length", type="intx", default=512, help="set the number of FFT bins [default=%default]")
		
	add_options = staticmethod(add_options)

	def _print_verbage(self):
		print "\nOFDM Demodulator:"
		print "FFT length:      %3d"   % (self._fft_length)
		print "Occupied Tones:  %3d"   % (self._occupied_tones)
		print "CP length:       %3d"   % (self._cp_length)

class _queue_watcher_thread(_threadingr.Thread):
	def __init__(self, rcvd_pktq, ofdm_recv, top, callback):
		_threadingr.Thread.__init__(self)
		self.setDaemon(1)
		self.rcvd_pktq = rcvd_pktq
		self.ofdm_recv = ofdm_recv #linklab
		self.top = top
		self.callback = callback
		self.keep_running = True
		self.start()

	def run(self):
		while self.keep_running:
			msg = self.rcvd_pktq.delete_head()
			#print "Message picked up from the queue, length: "+str(len(msg.to_string()))
			ok, payload = unmake_packet(msg.to_string(), dewhitening=1)			
			pktno = msg.arg1();
			srcid = msg.arg2();
			value = 'pktno='+str(pktno)+' ok='+str(ok)+' srcid='+str(srcid)+' len='+str(len(payload))+'\n'
			#print value
			
			int_fo, frac_fo =  self.ofdm_recv.get_freq_offset()  # linklab, frequency offset estimation
			time_sinr, freq_sinr = self.ofdm_recv.get_sinr()  # linklab, SINR estimation
			ch_gain = self.ofdm_recv.get_chgain()
			ch_gain_full = self.ofdm_recv.get_chgain_full()
			width_ranking = self.top.width_ranking(ch_gain_full)
			avg_gain = self.ofdm_recv.get_avggain()
			if self.callback:
				self.callback(ok, payload, int_fo, frac_fo, time_sinr, freq_sinr, ch_gain, ch_gain_full, avg_gain, width_ranking)


# Generating known symbols with:
# i = [2*random.randint(0,1)-1 for i in range(4512)]
known_symbols_4512_1 = [-1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1]
known_symbols
known_symbols_4512_3 = [-1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1]
